<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.1" xml:lang="en-US">
  <compounddef id="classmuda_1_1_device_var" kind="class" language="C++" prot="public">
    <compoundname>muda::DeviceVar</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmuda_1_1_device_var_1aca3ab0973acd3a24a3a16f2d37a98687" prot="public" static="no">
        <type>T</type>
        <definition>using muda::DeviceVar&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>muda::DeviceVar::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="17" column="5" bodyfile="src/muda/buffer/device_var.h" bodystart="17" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classmuda_1_1_device_var_1a3373c2e8cf6a6172637baf3c12d153ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BufferLaunch</definition>
        <argsstring></argsstring>
        <name>BufferLaunch</name>
        <qualifiedname>muda::DeviceVar::BufferLaunch</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_buffer_launch" kindref="compound">BufferLaunch</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="13" column="18" bodyfile="src/muda/buffer/device_var.h" bodystart="13" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmuda_1_1_device_var_1a1f0cf92a191f91a4f35bfe50ce35a2c3" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* muda::DeviceVar&lt; T &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <qualifiedname>muda::DeviceVar::m_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="14" column="7" bodyfile="src/muda/buffer/device_var.h" bodystart="14" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmuda_1_1_device_var_1a1a566600fd16206b511075fadd0528a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::DeviceVar&lt; T &gt;::DeviceVar</definition>
        <argsstring>()</argsstring>
        <name>DeviceVar</name>
        <qualifiedname>muda::DeviceVar::DeviceVar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="19" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a22a2e68a8748e142e93da83abb11c240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::DeviceVar&lt; T &gt;::DeviceVar</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>DeviceVar</name>
        <qualifiedname>muda::DeviceVar::DeviceVar</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="20" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a6a35d0d43d3b7db4e40b5ed728c82077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::DeviceVar&lt; T &gt;::DeviceVar</definition>
        <argsstring>(const DeviceVar &amp;other)</argsstring>
        <name>DeviceVar</name>
        <qualifiedname>muda::DeviceVar::DeviceVar</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_device_var" kindref="compound">DeviceVar</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="22" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a140a03aacfb89e5b8713021b0cf32a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::DeviceVar&lt; T &gt;::DeviceVar</definition>
        <argsstring>(DeviceVar &amp;&amp;other) MUDA_NOEXCEPT</argsstring>
        <name>DeviceVar</name>
        <qualifiedname>muda::DeviceVar::DeviceVar</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_device_var" kindref="compound">DeviceVar</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="23" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a8d47d30bd6f97c0be388d8c1b33c3f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmuda_1_1_device_var" kindref="compound">DeviceVar</ref> &amp;</type>
        <definition>DeviceVar &amp; muda::DeviceVar&lt; T &gt;::operator=</definition>
        <argsstring>(const DeviceVar&lt; T &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>muda::DeviceVar::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_device_var" kindref="compound">DeviceVar</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="24" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a5a8205acd176aabb93e013135c81bca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmuda_1_1_device_var" kindref="compound">DeviceVar</ref> &amp;</type>
        <definition>DeviceVar &amp; muda::DeviceVar&lt; T &gt;::operator=</definition>
        <argsstring>(DeviceVar&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>muda::DeviceVar::operator=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_device_var" kindref="compound">DeviceVar</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="25" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1aa735755a68fa2515b3407c5ee6110193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmuda_1_1_device_var" kindref="compound">DeviceVar</ref> &amp;</type>
        <definition>DeviceVar &amp; muda::DeviceVar&lt; T &gt;::operator=</definition>
        <argsstring>(CVarView&lt; T &gt; other)</argsstring>
        <name>operator=</name>
        <qualifiedname>muda::DeviceVar::operator=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_var_view_t" kindref="compound">CVarView</ref>&lt; T &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="29" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1ab97e59c53a483239e5111a31dd0464e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void muda::DeviceVar&lt; T &gt;::copy_from</definition>
        <argsstring>(CVarView&lt; T &gt; other)</argsstring>
        <name>copy_from</name>
        <qualifiedname>muda::DeviceVar::copy_from</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_var_view_t" kindref="compound">CVarView</ref>&lt; T &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="30" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a7598e7835dbcb85b083451e0881d5e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmuda_1_1_device_var" kindref="compound">DeviceVar</ref> &amp;</type>
        <definition>DeviceVar &amp; muda::DeviceVar&lt; T &gt;::operator=</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>operator=</name>
        <qualifiedname>muda::DeviceVar::operator=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="32" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a428eb3b6b12015f0cfeba8dfc4e6393b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::DeviceVar&lt; T &gt;::operator T</definition>
        <argsstring>() const</argsstring>
        <name>operator T</name>
        <qualifiedname>muda::DeviceVar::operator T</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="33" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a496e0c14b75cbc2fafff94b6b600c165" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * muda::DeviceVar&lt; T &gt;::data</definition>
        <argsstring>() MUDA_NOEXCEPT</argsstring>
        <name>data</name>
        <qualifiedname>muda::DeviceVar::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="35" column="13" bodyfile="src/muda/buffer/device_var.h" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1affdee91fb6e635d714ec3aac1062869c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * muda::DeviceVar&lt; T &gt;::data</definition>
        <argsstring>() const MUDA_NOEXCEPT</argsstring>
        <name>data</name>
        <qualifiedname>muda::DeviceVar::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="36" column="13" bodyfile="src/muda/buffer/device_var.h" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1ac2a87139ea4931349a6cc273bda70351" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmuda_1_1_var_view_t" kindref="compound">VarView</ref>&lt; T &gt;</type>
        <definition>VarView&lt; T &gt; muda::DeviceVar&lt; T &gt;::view</definition>
        <argsstring>() MUDA_NOEXCEPT</argsstring>
        <name>view</name>
        <qualifiedname>muda::DeviceVar::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="38" column="14" bodyfile="src/muda/buffer/device_var.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a0d21f2c8764280cc3ffac8235b8e458c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmuda_1_1_var_view_t" kindref="compound">CVarView</ref>&lt; T &gt;</type>
        <definition>CVarView&lt; T &gt; muda::DeviceVar&lt; T &gt;::view</definition>
        <argsstring>() const MUDA_NOEXCEPT</argsstring>
        <name>view</name>
        <qualifiedname>muda::DeviceVar::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="39" column="14" bodyfile="src/muda/buffer/device_var.h" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1ac10d148577d1195db59ce531ef850332" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>muda::DeviceVar&lt; T &gt;::operator VarView&lt; T &gt;</definition>
        <argsstring>() MUDA_NOEXCEPT</argsstring>
        <name>operator VarView&lt; T &gt;</name>
        <qualifiedname>muda::DeviceVar::operator VarView&lt; T &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="41" column="5" bodyfile="src/muda/buffer/device_var.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1abf741a474d3fc5167eed78bc5ed8dcb3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>muda::DeviceVar&lt; T &gt;::operator CVarView&lt; T &gt;</definition>
        <argsstring>() const MUDA_NOEXCEPT</argsstring>
        <name>operator CVarView&lt; T &gt;</name>
        <qualifiedname>muda::DeviceVar::operator CVarView&lt; T &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="42" column="5" bodyfile="src/muda/buffer/device_var.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a04c64e95d741d658b06f9a60d45a7f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmuda_1_1_dense_viewer_t" kindref="compound">Dense</ref>&lt; T &gt;</type>
        <definition>Dense&lt; T &gt; muda::DeviceVar&lt; T &gt;::viewer</definition>
        <argsstring>() MUDA_NOEXCEPT</argsstring>
        <name>viewer</name>
        <qualifiedname>muda::DeviceVar::viewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="44" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1aeb81aa43355fd748bbe54616c3c6e7d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmuda_1_1_dense_viewer_t" kindref="compound">CDense</ref>&lt; T &gt;</type>
        <definition>CDense&lt; T &gt; muda::DeviceVar&lt; T &gt;::cviewer</definition>
        <argsstring>() const MUDA_NOEXCEPT</argsstring>
        <name>cviewer</name>
        <qualifiedname>muda::DeviceVar::cviewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="45" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_device_var_1a2e295bc5d429300cccd447e7dd99ec23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::DeviceVar&lt; T &gt;::~DeviceVar</definition>
        <argsstring>()</argsstring>
        <name>~DeviceVar</name>
        <qualifiedname>muda::DeviceVar::~DeviceVar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/device_var.h" line="47" column="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/muda/buffer/buffer_fwd.h" line="46" column="1" bodyfile="src/muda/buffer/device_var.h" bodystart="11" bodyend="48"/>
    <listofallmembers>
      <member refid="classmuda_1_1_device_var_1a3373c2e8cf6a6172637baf3c12d153ad" prot="private" virt="non-virtual"><scope>muda::DeviceVar</scope><name>BufferLaunch</name></member>
      <member refid="classmuda_1_1_device_var_1ab97e59c53a483239e5111a31dd0464e5" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>copy_from</name></member>
      <member refid="classmuda_1_1_device_var_1aeb81aa43355fd748bbe54616c3c6e7d3" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>cviewer</name></member>
      <member refid="classmuda_1_1_device_var_1a496e0c14b75cbc2fafff94b6b600c165" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>data</name></member>
      <member refid="classmuda_1_1_device_var_1affdee91fb6e635d714ec3aac1062869c" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>data</name></member>
      <member refid="classmuda_1_1_device_var_1a1a566600fd16206b511075fadd0528a8" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>DeviceVar</name></member>
      <member refid="classmuda_1_1_device_var_1a22a2e68a8748e142e93da83abb11c240" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>DeviceVar</name></member>
      <member refid="classmuda_1_1_device_var_1a6a35d0d43d3b7db4e40b5ed728c82077" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>DeviceVar</name></member>
      <member refid="classmuda_1_1_device_var_1a140a03aacfb89e5b8713021b0cf32a44" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>DeviceVar</name></member>
      <member refid="classmuda_1_1_device_var_1a1f0cf92a191f91a4f35bfe50ce35a2c3" prot="private" virt="non-virtual"><scope>muda::DeviceVar</scope><name>m_data</name></member>
      <member refid="classmuda_1_1_device_var_1abf741a474d3fc5167eed78bc5ed8dcb3" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>operator CVarView&lt; T &gt;</name></member>
      <member refid="classmuda_1_1_device_var_1a428eb3b6b12015f0cfeba8dfc4e6393b" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>operator T</name></member>
      <member refid="classmuda_1_1_device_var_1ac10d148577d1195db59ce531ef850332" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>operator VarView&lt; T &gt;</name></member>
      <member refid="classmuda_1_1_device_var_1a8d47d30bd6f97c0be388d8c1b33c3f00" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>operator=</name></member>
      <member refid="classmuda_1_1_device_var_1a5a8205acd176aabb93e013135c81bca9" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>operator=</name></member>
      <member refid="classmuda_1_1_device_var_1aa735755a68fa2515b3407c5ee6110193" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>operator=</name></member>
      <member refid="classmuda_1_1_device_var_1a7598e7835dbcb85b083451e0881d5e4c" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>operator=</name></member>
      <member refid="classmuda_1_1_device_var_1aca3ab0973acd3a24a3a16f2d37a98687" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>value_type</name></member>
      <member refid="classmuda_1_1_device_var_1ac2a87139ea4931349a6cc273bda70351" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>view</name></member>
      <member refid="classmuda_1_1_device_var_1a0d21f2c8764280cc3ffac8235b8e458c" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>view</name></member>
      <member refid="classmuda_1_1_device_var_1a04c64e95d741d658b06f9a60d45a7f8e" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>viewer</name></member>
      <member refid="classmuda_1_1_device_var_1a2e295bc5d429300cccd447e7dd99ec23" prot="public" virt="non-virtual"><scope>muda::DeviceVar</scope><name>~DeviceVar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
