<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmuda_1_1_flags" kind="class" language="C++" prot="public">
    <compoundname>muda::Flags</compoundname>
    <templateparamlist>
      <param>
        <type>typename BitType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmuda_1_1_flags_1affb4e61018c931a9b35c1627f6183c13" prot="public" static="no">
        <type>BitType</type>
        <definition>using muda::Flags&lt; BitType &gt;::bit_type =  BitType</definition>
        <argsstring></argsstring>
        <name>bit_type</name>
        <qualifiedname>muda::Flags::bit_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="11" column="5" bodyfile="src/muda/tools/flag.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmuda_1_1_flags_1af6a552474bbff2a19ac459e57c6bf3fc" prot="public" static="no">
        <type>typename ::std::underlying_type&lt; bit_type &gt;::type</type>
        <definition>using muda::Flags&lt; BitType &gt;::mask_type =  typename ::std::underlying_type&lt;bit_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>mask_type</name>
        <qualifiedname>muda::Flags::mask_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="12" column="5" bodyfile="src/muda/tools/flag.h" bodystart="12" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmuda_1_1_flags_1a5ecd7ff67a3d22c2a0c2251f6c84b106" prot="private" static="no" mutable="no">
        <type>mask_type</type>
        <definition>mask_type muda::Flags&lt; BitType &gt;::m_mask</definition>
        <argsstring></argsstring>
        <name>m_mask</name>
        <qualifiedname>muda::Flags::m_mask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="122" column="15" bodyfile="src/muda/tools/flag.h" bodystart="122" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmuda_1_1_flags_1af7eb200df66c438030e55e659167c9b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR muda::Flags&lt; BitType &gt;::Flags</definition>
        <argsstring>() MUDA_NOEXCEPT</argsstring>
        <name>Flags</name>
        <qualifiedname>muda::Flags::Flags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="15" column="33" bodyfile="src/muda/tools/flag.h" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a65db3209b004cb8632c418ef75931eeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR muda::Flags&lt; BitType &gt;::Flags</definition>
        <argsstring>(BitType bit) MUDA_NOEXCEPT</argsstring>
        <name>Flags</name>
        <qualifiedname>muda::Flags::Flags</qualifiedname>
        <param>
          <type>BitType</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="17" column="33" bodyfile="src/muda/tools/flag.h" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1ad68ce2104bf725ef4084a996f04825b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR muda::Flags&lt; BitType &gt;::Flags</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) MUDA_NOEXCEPT=default</argsstring>
        <name>Flags</name>
        <qualifiedname>muda::Flags::Flags</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="22" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1adadae3bed6d332d9a2ccdc8ffa25d2a8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR muda::Flags&lt; BitType &gt;::Flags</definition>
        <argsstring>(mask_type flags) MUDA_NOEXCEPT</argsstring>
        <name>Flags</name>
        <qualifiedname>muda::Flags::Flags</qualifiedname>
        <param>
          <type>mask_type</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="24" column="42" bodyfile="src/muda/tools/flag.h" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a8be4a4df0246fd1cc34b4b333d7d1c7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR bool</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR bool muda::Flags&lt; BitType &gt;::operator&lt;</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>muda::Flags::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="31" column="33" bodyfile="src/muda/tools/flag.h" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a3c8ef3549b10ea9a8926bc4ec77efdb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR bool</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR bool muda::Flags&lt; BitType &gt;::operator&lt;=</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>muda::Flags::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="36" column="33" bodyfile="src/muda/tools/flag.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a4251ed99d97f1d1c42ccf0418ec6b0e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR bool</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR bool muda::Flags&lt; BitType &gt;::operator&gt;</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>muda::Flags::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="41" column="38" bodyfile="src/muda/tools/flag.h" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a6b81f50dfda1a143a3d7e06933a34f89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR bool</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR bool muda::Flags&lt; BitType &gt;::operator&gt;=</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>muda::Flags::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="46" column="38" bodyfile="src/muda/tools/flag.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a80c3ae7da5c6fdf4a7b8a3ad54a13a13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR bool</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR bool muda::Flags&lt; BitType &gt;::operator==</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator==</name>
        <qualifiedname>muda::Flags::operator==</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="51" column="38" bodyfile="src/muda/tools/flag.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a81cd83576e1e49619acc092511502f9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR bool</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR bool muda::Flags&lt; BitType &gt;::operator!=</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator!=</name>
        <qualifiedname>muda::Flags::operator!=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="56" column="38" bodyfile="src/muda/tools/flag.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a2760dd94bb56dfc96a6d9e6a480051c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR bool</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR bool muda::Flags&lt; BitType &gt;::operator!</definition>
        <argsstring>() const MUDA_NOEXCEPT</argsstring>
        <name>operator!</name>
        <qualifiedname>muda::Flags::operator!</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="63" column="38" bodyfile="src/muda/tools/flag.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a2baeb6a3665876c055bcd17a7877df31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt;</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; muda::Flags&lt; BitType &gt;::operator&amp;</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>muda::Flags::operator&amp;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="69" column="39" bodyfile="src/muda/tools/flag.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a49aefea1c7096f2fdceca795c5674f90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt;</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; muda::Flags&lt; BitType &gt;::operator|</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator|</name>
        <qualifiedname>muda::Flags::operator|</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="74" column="39" bodyfile="src/muda/tools/flag.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a30ca93599f179bc039c49c4bab6e6c01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt;</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; muda::Flags&lt; BitType &gt;::operator^</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) const MUDA_NOEXCEPT</argsstring>
        <name>operator^</name>
        <qualifiedname>muda::Flags::operator^</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="79" column="39" bodyfile="src/muda/tools/flag.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1aede5951e31d09b8c33e389ad71d199af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; &amp;</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; &amp; muda::Flags&lt; BitType &gt;::operator=</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) MUDA_NOEXCEPT=default</argsstring>
        <name>operator=</name>
        <qualifiedname>muda::Flags::operator=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="85" column="39"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a0a982cbeedbb67a1adce96e125133c3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; &amp;</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; &amp; muda::Flags&lt; BitType &gt;::operator|=</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) MUDA_NOEXCEPT</argsstring>
        <name>operator|=</name>
        <qualifiedname>muda::Flags::operator|=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="87" column="39" bodyfile="src/muda/tools/flag.h" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1aea0bc29174eac12b6e46922c434ffadd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; &amp;</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; &amp; muda::Flags&lt; BitType &gt;::operator&amp;=</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) MUDA_NOEXCEPT</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>muda::Flags::operator&amp;=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="93" column="39" bodyfile="src/muda/tools/flag.h" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a8bcfaffd19267a864263d8ff41fd6d95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; &amp;</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; &amp; muda::Flags&lt; BitType &gt;::operator^=</definition>
        <argsstring>(Flags&lt; BitType &gt; const &amp;rhs) MUDA_NOEXCEPT</argsstring>
        <name>operator^=</name>
        <qualifiedname>muda::Flags::operator^=</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="99" column="39" bodyfile="src/muda/tools/flag.h" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1aa53c77bf868a1d5a4a375996d7f6b370" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR muda::Flags&lt; BitType &gt;::operator bool</definition>
        <argsstring>() const MUDA_NOEXCEPT</argsstring>
        <name>operator bool</name>
        <qualifiedname>muda::Flags::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="106" column="42" bodyfile="src/muda/tools/flag.h" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1ac83923c63357f75534ec1423584c31aa" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR muda::Flags&lt; BitType &gt;::operator mask_type</definition>
        <argsstring>() const MUDA_NOEXCEPT</argsstring>
        <name>operator mask_type</name>
        <qualifiedname>muda::Flags::operator mask_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="111" column="42" bodyfile="src/muda/tools/flag.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classmuda_1_1_flags_1a93aa38edfded61290909b9c08d65eaba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MUDA_GENERIC MUDA_CONSTEXPR bool</type>
        <definition>MUDA_GENERIC MUDA_CONSTEXPR bool muda::Flags&lt; BitType &gt;::has</definition>
        <argsstring>(BitType bit) const MUDA_NOEXCEPT</argsstring>
        <name>has</name>
        <qualifiedname>muda::Flags::has</qualifiedname>
        <param>
          <type>BitType</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="116" column="38" bodyfile="src/muda/tools/flag.h" bodystart="116" bodyend="119"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/muda/tools/flag.h" line="8" column="1" bodyfile="src/muda/tools/flag.h" bodystart="9" bodyend="123"/>
    <listofallmembers>
      <member refid="classmuda_1_1_flags_1affb4e61018c931a9b35c1627f6183c13" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>bit_type</name></member>
      <member refid="classmuda_1_1_flags_1af7eb200df66c438030e55e659167c9b6" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>Flags</name></member>
      <member refid="classmuda_1_1_flags_1a65db3209b004cb8632c418ef75931eeb" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>Flags</name></member>
      <member refid="classmuda_1_1_flags_1ad68ce2104bf725ef4084a996f04825b4" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>Flags</name></member>
      <member refid="classmuda_1_1_flags_1adadae3bed6d332d9a2ccdc8ffa25d2a8" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>Flags</name></member>
      <member refid="classmuda_1_1_flags_1a93aa38edfded61290909b9c08d65eaba" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>has</name></member>
      <member refid="classmuda_1_1_flags_1a5ecd7ff67a3d22c2a0c2251f6c84b106" prot="private" virt="non-virtual"><scope>muda::Flags</scope><name>m_mask</name></member>
      <member refid="classmuda_1_1_flags_1af6a552474bbff2a19ac459e57c6bf3fc" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>mask_type</name></member>
      <member refid="classmuda_1_1_flags_1aa53c77bf868a1d5a4a375996d7f6b370" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator bool</name></member>
      <member refid="classmuda_1_1_flags_1ac83923c63357f75534ec1423584c31aa" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator mask_type</name></member>
      <member refid="classmuda_1_1_flags_1a2760dd94bb56dfc96a6d9e6a480051c2" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator!</name></member>
      <member refid="classmuda_1_1_flags_1a81cd83576e1e49619acc092511502f9a" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator!=</name></member>
      <member refid="classmuda_1_1_flags_1a2baeb6a3665876c055bcd17a7877df31" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator&amp;</name></member>
      <member refid="classmuda_1_1_flags_1aea0bc29174eac12b6e46922c434ffadd" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator&amp;=</name></member>
      <member refid="classmuda_1_1_flags_1a8be4a4df0246fd1cc34b4b333d7d1c7f" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator&lt;</name></member>
      <member refid="classmuda_1_1_flags_1a3c8ef3549b10ea9a8926bc4ec77efdb0" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator&lt;=</name></member>
      <member refid="classmuda_1_1_flags_1aede5951e31d09b8c33e389ad71d199af" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator=</name></member>
      <member refid="classmuda_1_1_flags_1a80c3ae7da5c6fdf4a7b8a3ad54a13a13" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator==</name></member>
      <member refid="classmuda_1_1_flags_1a4251ed99d97f1d1c42ccf0418ec6b0e9" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator&gt;</name></member>
      <member refid="classmuda_1_1_flags_1a6b81f50dfda1a143a3d7e06933a34f89" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator&gt;=</name></member>
      <member refid="classmuda_1_1_flags_1a30ca93599f179bc039c49c4bab6e6c01" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator^</name></member>
      <member refid="classmuda_1_1_flags_1a8bcfaffd19267a864263d8ff41fd6d95" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator^=</name></member>
      <member refid="classmuda_1_1_flags_1a49aefea1c7096f2fdceca795c5674f90" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator|</name></member>
      <member refid="classmuda_1_1_flags_1a0a982cbeedbb67a1adce96e125133c3d" prot="public" virt="non-virtual"><scope>muda::Flags</scope><name>operator|=</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
