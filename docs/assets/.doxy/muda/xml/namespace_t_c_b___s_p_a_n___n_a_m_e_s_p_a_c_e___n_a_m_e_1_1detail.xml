<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.1" xml:lang="en-US">
  <compounddef id="namespace_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail" kind="namespace" language="C++">
    <compoundname>TCB_SPAN_NAMESPACE_NAME::detail</compoundname>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1has__size__and__data" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::has_size_and_data</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1has__size__and__data" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::has_size_and_data&lt; T, void_t&lt; decltype(detail::size(std::declval&lt; T &gt;())), decltype(detail::data(std::declval&lt; T &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__complete" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_complete</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__complete" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_complete&lt; T, decltype(sizeof(T))&gt;</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__container" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_container</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__container__element__type__compatible" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_container_element_type_compatible</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__container__element__type__compatible" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_container_element_type_compatible&lt; T, E, typename std::enable_if&lt; !std::is_same&lt; typename std::remove_cv&lt; decltype(detail::data(std::declval&lt; T &gt;()))&gt;::type, void &gt;::value &amp;&amp;std::is_convertible&lt; remove_pointer_t&lt; decltype(detail::data(std::declval&lt; T &gt;()))&gt;(*)[], E(*)[]&gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__span" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_span</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__span" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_span&lt; span&lt; T, S &gt; &gt;</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__std__array" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_std_array</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1is__std__array" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::is_std_array&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1span__storage" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::span_storage</innerclass>
    <innerclass refid="struct_t_c_b___s_p_a_n___n_a_m_e_s_p_a_c_e___n_a_m_e_1_1detail_1_1span__storage" prot="public">TCB_SPAN_NAMESPACE_NAME::detail::span_storage&lt; E, dynamic_extent &gt;</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="span_8hpp_1a92807f98c8423342ba21ad78586a0d05" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>using TCB_SPAN_NAMESPACE_NAME::detail::void_t =  void</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::void_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="223" column="1" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="span_8hpp_1aa9af056aed5397252fb74fbe620ca34f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type</type>
        <definition>using TCB_SPAN_NAMESPACE_NAME::detail::uncvref_t = 
    typename std::remove_cv&lt;typename std::remove_reference&lt;T&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>uncvref_t</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::uncvref_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="227" column="1" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="span_8hpp_1a2d153682c1762ef4360d8f49b3e5bae1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_pointer&lt; T &gt;::type</type>
        <definition>using TCB_SPAN_NAMESPACE_NAME::detail::remove_pointer_t =  typename std::remove_pointer&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_pointer_t</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::remove_pointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="258" column="1" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="span_8hpp_1a876af6f91231ae4e7e7316f5402682dc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>decltype(c.size())</type>
        <definition>decltype(c.size()) TCB_SPAN_NAMESPACE_NAME::detail::size</definition>
        <argsstring>(const C &amp;c)</argsstring>
        <name>size</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::size</qualifiedname>
        <param>
          <type>const C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="183" column="16" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="span_8hpp_1a834a91a810cb058282fffc120d9fa8ab" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t TCB_SPAN_NAMESPACE_NAME::detail::size</definition>
        <argsstring>(const T(&amp;)[N]) noexcept</argsstring>
        <name>size</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::size</qualifiedname>
        <param>
          <type>const </type>
          <declname>T</declname>
          <array>(&amp;)[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="189" column="23" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="span_8hpp_1ada90c89c458a0d53c483e767de7b7701" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>decltype(c.data())</type>
        <definition>decltype(c.data()) TCB_SPAN_NAMESPACE_NAME::detail::data</definition>
        <argsstring>(C &amp;c)</argsstring>
        <name>data</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::data</qualifiedname>
        <param>
          <type>C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="195" column="16" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="span_8hpp_1aa175cdddf002f8c0233d4c5d682cc819" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>decltype(c.data())</type>
        <definition>decltype(c.data()) TCB_SPAN_NAMESPACE_NAME::detail::data</definition>
        <argsstring>(const C &amp;c)</argsstring>
        <name>data</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::data</qualifiedname>
        <param>
          <type>const C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="201" column="16" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="span_8hpp_1a7805e4f5cd80ba8e0fe70caa5ea8088f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * TCB_SPAN_NAMESPACE_NAME::detail::data</definition>
        <argsstring>(T(&amp;array)[N]) noexcept</argsstring>
        <name>data</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::data</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="207" column="13" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="span_8hpp_1a0adcec12099e020716666f2e169c1ccf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class E</type>
          </param>
        </templateparamlist>
        <type>const E *</type>
        <definition>const E * TCB_SPAN_NAMESPACE_NAME::detail::data</definition>
        <argsstring>(std::initializer_list&lt; E &gt; il) noexcept</argsstring>
        <name>data</name>
        <qualifiedname>TCB_SPAN_NAMESPACE_NAME::detail::data</qualifiedname>
        <param>
          <type>std::initializer_list&lt; E &gt;</type>
          <declname>il</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/tcb/span.hpp" line="213" column="19" bodyfile="src/muda/mstl/tcb/span.hpp" bodystart="213" bodyend="216"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/muda/mstl/tcb/span.hpp" line="150" column="1"/>
  </compounddef>
</doxygen>
