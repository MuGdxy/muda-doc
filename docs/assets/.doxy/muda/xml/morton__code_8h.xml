<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.1" xml:lang="en-US">
  <compounddef id="morton__code_8h" kind="file" language="C++">
    <compoundname>morton_code.h</compoundname>
    <includes local="no">vector_types.h</includes>
    <includes refid="cuda__runtime_8h" local="no">cuda_runtime.h</includes>
    <includes local="no">cstdint</includes>
    <includedby refid="bvh__viewer_8h" local="no">src/muda/ext/geo/lbvh/bvh_viewer.h</includedby>
    <includedby refid="lbvh_2lbvh_8h" local="no">src/muda/ext/geo/lbvh/lbvh.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>cuda_runtime.h</label>
        <link refid="cuda__runtime_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/muda/ext/geo/lbvh/morton_code.h</label>
        <link refid="morton__code_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="2">
        <label>vector_types.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>src/muda/ext/geo/lbvh.h</label>
        <link refid="lbvh_8h_source"/>
      </node>
      <node id="3">
        <label>src/muda/ext/geo/lbvh/bvh.h</label>
        <link refid="bvh_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/muda/ext/geo/lbvh/bvh_viewer.h</label>
        <link refid="bvh__viewer_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/muda/ext/geo/lbvh/lbvh.h</label>
        <link refid="lbvh_2lbvh_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/muda/ext/geo/lbvh/morton_code.h</label>
        <link refid="morton__code_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/muda/ext/geo/lbvh/query.h</label>
        <link refid="query_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacemuda">muda</innernamespace>
    <innernamespace refid="namespacemuda_1_1lbvh">muda::lbvh</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector_types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda_runtime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">muda::lbvh</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal">MUDA_GENERIC<sp/>MUDA_INLINE<sp/>std::uint32_t<sp/>expand_bits(std::uint32_t<sp/>v)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(v<sp/>*<sp/>0x00010001u)<sp/>&amp;<sp/>0xFF0000FFu;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(v<sp/>*<sp/>0x00000101u)<sp/>&amp;<sp/>0x0F00F00Fu;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(v<sp/>*<sp/>0x00000011u)<sp/>&amp;<sp/>0xC30C30C3u;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(v<sp/>*<sp/>0x00000005u)<sp/>&amp;<sp/>0x49249249u;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculates<sp/>a<sp/>30-bit<sp/>Morton<sp/>code<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>3D<sp/>point<sp/>located<sp/>within<sp/>the<sp/>unit<sp/>cube<sp/>[0,1].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">MUDA_GENERIC<sp/>MUDA_INLINE<sp/>std::uint32_t<sp/>morton_code(float4<sp/>xyz,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>resolution<sp/>=<sp/>1024.0f)<sp/>noexcept</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>xyz.x<sp/>=<sp/>::fminf(::fmaxf(xyz.x<sp/>*<sp/>resolution,<sp/>0.0f),<sp/>resolution<sp/>-<sp/>1.0f);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>xyz.y<sp/>=<sp/>::fminf(::fmaxf(xyz.y<sp/>*<sp/>resolution,<sp/>0.0f),<sp/>resolution<sp/>-<sp/>1.0f);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>xyz.z<sp/>=<sp/>::fminf(::fmaxf(xyz.z<sp/>*<sp/>resolution,<sp/>0.0f),<sp/>resolution<sp/>-<sp/>1.0f);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint32_t<sp/>xx<sp/>=<sp/>expand_bits(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(xyz.x));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint32_t<sp/>yy<sp/>=<sp/>expand_bits(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(xyz.y));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint32_t<sp/>zz<sp/>=<sp/>expand_bits(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(xyz.z));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xx<sp/>*<sp/>4<sp/>+<sp/>yy<sp/>*<sp/>2<sp/>+<sp/>zz;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">MUDA_GENERIC<sp/>MUDA_INLINE<sp/>std::uint32_t<sp/>morton_code(double4<sp/>xyz,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>resolution<sp/>=<sp/>1024.0)<sp/>noexcept</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>xyz.x<sp/>=<sp/>::fmin(::fmax(xyz.x<sp/>*<sp/>resolution,<sp/>0.0),<sp/>resolution<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>xyz.y<sp/>=<sp/>::fmin(::fmax(xyz.y<sp/>*<sp/>resolution,<sp/>0.0),<sp/>resolution<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>xyz.z<sp/>=<sp/>::fmin(::fmax(xyz.z<sp/>*<sp/>resolution,<sp/>0.0),<sp/>resolution<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint32_t<sp/>xx<sp/>=<sp/>expand_bits(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(xyz.x));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint32_t<sp/>yy<sp/>=<sp/>expand_bits(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(xyz.y));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint32_t<sp/>zz<sp/>=<sp/>expand_bits(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(xyz.z));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xx<sp/>*<sp/>4<sp/>+<sp/>yy<sp/>*<sp/>2<sp/>+<sp/>zz;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">__device__<sp/>MUDA_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>common_upper_bits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::__clz(lhs<sp/>^<sp/>rhs);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">__device__<sp/>MUDA_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>common_upper_bits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::__clzll(lhs<sp/>^<sp/>rhs);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>muda::lbvh</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/muda/ext/geo/lbvh/morton_code.h"/>
  </compounddef>
</doxygen>
