<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacemuda" kind="namespace" language="C++">
    <compoundname>muda</compoundname>
    <innerclass refid="structmuda_1_1always__false" prot="public">muda::always_false</innerclass>
    <innerclass refid="structmuda_1_1always__true" prot="public">muda::always_true</innerclass>
    <innerclass refid="classmuda_1_1_b_s_r_matrix_view_base" prot="public">muda::BSRMatrixViewBase</innerclass>
    <innerclass refid="classmuda_1_1_buffer2_d_view_t" prot="public">muda::Buffer2DViewT</innerclass>
    <innerclass refid="classmuda_1_1_buffer3_d_view_t" prot="public">muda::Buffer3DViewT</innerclass>
    <innerclass refid="classmuda_1_1_buffer_launch" prot="public">muda::BufferLaunch</innerclass>
    <innerclass refid="classmuda_1_1_buffer_view_t" prot="public">muda::BufferViewT</innerclass>
    <innerclass refid="classmuda_1_1_c_dense_matrix_view" prot="public">muda::CDenseMatrixView</innerclass>
    <innerclass refid="classmuda_1_1_c_dense_matrix_viewer" prot="public">muda::CDenseMatrixViewer</innerclass>
    <innerclass refid="classmuda_1_1_c_dense_vector_viewer" prot="public">muda::CDenseVectorViewer</innerclass>
    <innerclass refid="classmuda_1_1_c_doublet_vector_viewer" prot="public">muda::CDoubletVectorViewer</innerclass>
    <innerclass refid="classmuda_1_1_c_doublet_vector_viewer_3_01_t_00_011_01_4" prot="public">muda::CDoubletVectorViewer&lt; T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_c_field_entry_view" prot="public">muda::CFieldEntryView</innerclass>
    <innerclass refid="classmuda_1_1_c_field_entry_viewer" prot="private">muda::CFieldEntryViewer</innerclass>
    <innerclass refid="classmuda_1_1_closure_id" prot="public">muda::ClosureId</innerclass>
    <innerclass refid="classmuda_1_1_c_matrix_map_info" prot="public">muda::CMatrixMapInfo</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph" prot="public">muda::ComputeGraph</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_builder" prot="public">muda::ComputeGraphBuilder</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_capture_node" prot="public">muda::ComputeGraphCaptureNode</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_closure" prot="public">muda::ComputeGraphClosure</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_dependency" prot="public">muda::ComputeGraphDependency</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_graphviz_options" prot="public">muda::ComputeGraphGraphvizOptions</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_node" prot="public">muda::ComputeGraphNode</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_node_base" prot="public">muda::ComputeGraphNodeBase</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_var" prot="public">muda::ComputeGraphVar</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_var_3_01_buffer2_d_view_3_01_t_01_4_01_4" prot="public">muda::ComputeGraphVar&lt; Buffer2DView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_var_3_01_buffer3_d_view_3_01_t_01_4_01_4" prot="public">muda::ComputeGraphVar&lt; Buffer3DView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_var_3_01_buffer_view_3_01_t_01_4_01_4" prot="public">muda::ComputeGraphVar&lt; BufferView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_var_3_01_graph_viewer_01_4" prot="public">muda::ComputeGraphVar&lt; GraphViewer &gt;</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_var_3_01_var_view_3_01_t_01_4_01_4" prot="public">muda::ComputeGraphVar&lt; VarView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_var_base" prot="public">muda::ComputeGraphVarBase</innerclass>
    <innerclass refid="classmuda_1_1_compute_graph_var_manager" prot="public">muda::ComputeGraphVarManager</innerclass>
    <innerclass refid="classmuda_1_1_c_o_o_matrix_view_base" prot="public">muda::COOMatrixViewBase</innerclass>
    <innerclass refid="classmuda_1_1_c_o_o_vector_view_base" prot="public">muda::COOVectorViewBase</innerclass>
    <innerclass refid="classmuda_1_1_c_s_r_matrix_view_base" prot="public">muda::CSRMatrixViewBase</innerclass>
    <innerclass refid="classmuda_1_1_c_triplet_matrix_viewer" prot="public">muda::CTripletMatrixViewer</innerclass>
    <innerclass refid="classmuda_1_1_c_triplet_matrix_viewer_3_01_t_00_011_01_4" prot="public">muda::CTripletMatrixViewer&lt; T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_cub_wrapper" prot="public">muda::CubWrapper</innerclass>
    <innerclass refid="classmuda_1_1cuda__error" prot="public">muda::cuda_error</innerclass>
    <innerclass refid="classmuda_1_1_debug" prot="public">muda::Debug</innerclass>
    <innerclass refid="structmuda_1_1_default" prot="public">muda::Default</innerclass>
    <innerclass refid="classmuda_1_1_dense1_d_t" prot="public">muda::Dense1DT</innerclass>
    <innerclass refid="classmuda_1_1_dense2_d_base" prot="public">muda::Dense2DBase</innerclass>
    <innerclass refid="classmuda_1_1_dense3_d_base" prot="public">muda::Dense3DBase</innerclass>
    <innerclass refid="classmuda_1_1_dense_matrix_view" prot="public">muda::DenseMatrixView</innerclass>
    <innerclass refid="classmuda_1_1_dense_matrix_view_base" prot="public">muda::DenseMatrixViewBase</innerclass>
    <innerclass refid="classmuda_1_1_dense_matrix_viewer" prot="public">muda::DenseMatrixViewer</innerclass>
    <innerclass refid="classmuda_1_1_dense_matrix_viewer_base" prot="public">muda::DenseMatrixViewerBase</innerclass>
    <innerclass refid="classmuda_1_1_dense_vector_view_base" prot="public">muda::DenseVectorViewBase</innerclass>
    <innerclass refid="classmuda_1_1_dense_vector_viewer" prot="public">muda::DenseVectorViewer</innerclass>
    <innerclass refid="classmuda_1_1_dense_vector_viewer_base" prot="public">muda::DenseVectorViewerBase</innerclass>
    <innerclass refid="classmuda_1_1_dense_viewer_t" prot="public">muda::DenseViewerT</innerclass>
    <innerclass refid="classmuda_1_1_device_b_c_o_o_matrix" prot="public">muda::DeviceBCOOMatrix</innerclass>
    <innerclass refid="classmuda_1_1_device_b_c_o_o_matrix_3_01_ty_00_011_01_4" prot="public">muda::DeviceBCOOMatrix&lt; Ty, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_device_b_c_o_o_vector" prot="public">muda::DeviceBCOOVector</innerclass>
    <innerclass refid="classmuda_1_1_device_b_c_o_o_vector_3_01_t_00_011_01_4" prot="public">muda::DeviceBCOOVector&lt; T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_device_b_s_r_matrix" prot="public">muda::DeviceBSRMatrix</innerclass>
    <innerclass refid="classmuda_1_1_device_buffer" prot="public">muda::DeviceBuffer</innerclass>
    <innerclass refid="classmuda_1_1_device_buffer2_d" prot="public">muda::DeviceBuffer2D</innerclass>
    <innerclass refid="classmuda_1_1_device_buffer3_d" prot="public">muda::DeviceBuffer3D</innerclass>
    <innerclass refid="classmuda_1_1_device_c_s_r_matrix" prot="public">muda::DeviceCSRMatrix</innerclass>
    <innerclass refid="classmuda_1_1_device_dense_matrix" prot="public">muda::DeviceDenseMatrix</innerclass>
    <innerclass refid="classmuda_1_1_device_dense_vector" prot="public">muda::DeviceDenseVector</innerclass>
    <innerclass refid="classmuda_1_1_device_doublet_vector" prot="public">muda::DeviceDoubletVector</innerclass>
    <innerclass refid="classmuda_1_1_device_doublet_vector_3_01_t_00_011_01_4" prot="public">muda::DeviceDoubletVector&lt; T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_device_histogram" prot="public">muda::DeviceHistogram</innerclass>
    <innerclass refid="classmuda_1_1_device_merge_sort" prot="public">muda::DeviceMergeSort</innerclass>
    <innerclass refid="classmuda_1_1_device_partition" prot="public">muda::DevicePartition</innerclass>
    <innerclass refid="classmuda_1_1_device_radix_sort" prot="public">muda::DeviceRadixSort</innerclass>
    <innerclass refid="classmuda_1_1_device_reduce" prot="public">muda::DeviceReduce</innerclass>
    <innerclass refid="classmuda_1_1_device_run_length_encode" prot="public">muda::DeviceRunLengthEncode</innerclass>
    <innerclass refid="classmuda_1_1_device_scan" prot="public">muda::DeviceScan</innerclass>
    <innerclass refid="classmuda_1_1_device_segmented_radix_sort" prot="public">muda::DeviceSegmentedRadixSort</innerclass>
    <innerclass refid="classmuda_1_1_device_segmented_reduce" prot="public">muda::DeviceSegmentedReduce</innerclass>
    <innerclass refid="classmuda_1_1_device_segmented_sort" prot="public">muda::DeviceSegmentedSort</innerclass>
    <innerclass refid="classmuda_1_1_device_select" prot="public">muda::DeviceSelect</innerclass>
    <innerclass refid="classmuda_1_1_device_spmv" prot="public">muda::DeviceSpmv</innerclass>
    <innerclass refid="classmuda_1_1_device_triplet_matrix" prot="public">muda::DeviceTripletMatrix</innerclass>
    <innerclass refid="classmuda_1_1_device_triplet_matrix_3_01_t_00_011_01_4" prot="public">muda::DeviceTripletMatrix&lt; T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_device_var" prot="public">muda::DeviceVar</innerclass>
    <innerclass refid="classmuda_1_1_device_vector" prot="public">muda::DeviceVector</innerclass>
    <innerclass refid="classmuda_1_1_doublet_vector_view_base" prot="public">muda::DoubletVectorViewBase</innerclass>
    <innerclass refid="classmuda_1_1_doublet_vector_view_base_3_01_is_const_00_01_t_00_011_01_4" prot="public">muda::DoubletVectorViewBase&lt; IsConst, T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_doublet_vector_viewer" prot="public">muda::DoubletVectorViewer</innerclass>
    <innerclass refid="classmuda_1_1_doublet_vector_viewer_3_01_t_00_011_01_4" prot="public">muda::DoubletVectorViewer&lt; T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_doublet_vector_viewer_base" prot="public">muda::DoubletVectorViewerBase</innerclass>
    <innerclass refid="classmuda_1_1_doublet_vector_viewer_base_3_01_is_const_00_01_t_00_011_01_4" prot="public">muda::DoubletVectorViewerBase&lt; IsConst, T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_empty" prot="public">muda::Empty</innerclass>
    <innerclass refid="classmuda_1_1_event" prot="public">muda::Event</innerclass>
    <innerclass refid="classmuda_1_1_event_record_node" prot="public">muda::EventRecordNode</innerclass>
    <innerclass refid="classmuda_1_1_event_wait_node" prot="public">muda::EventWaitNode</innerclass>
    <innerclass refid="classmuda_1_1exception" prot="public">muda::exception</innerclass>
    <innerclass refid="classmuda_1_1_extent2_d" prot="public">muda::Extent2D</innerclass>
    <innerclass refid="classmuda_1_1_extent3_d" prot="public">muda::Extent3D</innerclass>
    <innerclass refid="classmuda_1_1_field" prot="public">muda::Field</innerclass>
    <innerclass refid="classmuda_1_1_field_builder" prot="public">muda::FieldBuilder</innerclass>
    <innerclass refid="classmuda_1_1_field_build_options" prot="public">muda::FieldBuildOptions</innerclass>
    <innerclass refid="classmuda_1_1_field_entry" prot="public">muda::FieldEntry</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_base" prot="public">muda::FieldEntryBase</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_base_data" prot="public">muda::FieldEntryBaseData</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_core" prot="public">muda::FieldEntryCore</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_launch" prot="public">muda::FieldEntryLaunch</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_layout_info" prot="public">muda::FieldEntryLayoutInfo</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_view" prot="public">muda::FieldEntryView</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_view_base" prot="public">muda::FieldEntryViewBase</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_view_core" prot="public">muda::FieldEntryViewCore</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_viewer" prot="private">muda::FieldEntryViewer</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_viewer_base" prot="private">muda::FieldEntryViewerBase</innerclass>
    <innerclass refid="classmuda_1_1_field_entry_viewer_core" prot="public">muda::FieldEntryViewerCore</innerclass>
    <innerclass refid="classmuda_1_1_flags" prot="public">muda::Flags</innerclass>
    <innerclass refid="structmuda_1_1force__trivial" prot="public">muda::force_trivial</innerclass>
    <innerclass refid="structmuda_1_1force__trivially__constructible" prot="public">muda::force_trivially_constructible</innerclass>
    <innerclass refid="structmuda_1_1force__trivially__copy__assignable" prot="public">muda::force_trivially_copy_assignable</innerclass>
    <innerclass refid="structmuda_1_1force__trivially__copy__constructible" prot="public">muda::force_trivially_copy_constructible</innerclass>
    <innerclass refid="structmuda_1_1force__trivially__destructible" prot="public">muda::force_trivially_destructible</innerclass>
    <innerclass refid="classmuda_1_1_graph" prot="public">muda::Graph</innerclass>
    <innerclass refid="classmuda_1_1_graph_exec" prot="public">muda::GraphExec</innerclass>
    <innerclass refid="classmuda_1_1_graph_launch" prot="public">muda::GraphLaunch</innerclass>
    <innerclass refid="classmuda_1_1_graph_node" prot="public">muda::GraphNode</innerclass>
    <innerclass refid="classmuda_1_1_graph_viewer" prot="public">muda::GraphViewer</innerclass>
    <innerclass refid="classmuda_1_1_host_call" prot="public">muda::HostCall</innerclass>
    <innerclass refid="classmuda_1_1_host_device_config" prot="public">muda::HostDeviceConfig</innerclass>
    <innerclass refid="classmuda_1_1_host_device_config_view" prot="public">muda::HostDeviceConfigView</innerclass>
    <innerclass refid="classmuda_1_1_host_node" prot="public">muda::HostNode</innerclass>
    <innerclass refid="classmuda_1_1_host_node_parms" prot="public">muda::HostNodeParms</innerclass>
    <innerclass refid="classmuda_1_1_host_vector" prot="public">muda::HostVector</innerclass>
    <innerclass refid="classmuda_1_1_id_with_type" prot="public">muda::IdWithType</innerclass>
    <innerclass refid="classmuda_1_1invalid__argument" prot="public">muda::invalid_argument</innerclass>
    <innerclass refid="structmuda_1_1is__cuda__arch" prot="public">muda::is_cuda_arch</innerclass>
    <innerclass refid="classmuda_1_1_kernel" prot="public">muda::Kernel</innerclass>
    <innerclass refid="classmuda_1_1_kernel_label" prot="public">muda::KernelLabel</innerclass>
    <innerclass refid="classmuda_1_1_kernel_node" prot="public">muda::KernelNode</innerclass>
    <innerclass refid="classmuda_1_1_kernel_node_parms" prot="public">muda::KernelNodeParms</innerclass>
    <innerclass refid="classmuda_1_1_launch" prot="public">muda::Launch</innerclass>
    <innerclass refid="classmuda_1_1_launch_base" prot="public">muda::LaunchBase</innerclass>
    <innerclass refid="classmuda_1_1_launch_core" prot="public">muda::LaunchCore</innerclass>
    <innerclass refid="classmuda_1_1_linear_system_algorithm" prot="public">muda::LinearSystemAlgorithm</innerclass>
    <innerclass refid="classmuda_1_1_linear_system_context" prot="public">muda::LinearSystemContext</innerclass>
    <innerclass refid="classmuda_1_1_linear_system_context_create_info" prot="public">muda::LinearSystemContextCreateInfo</innerclass>
    <innerclass refid="classmuda_1_1_linear_system_handles" prot="public">muda::LinearSystemHandles</innerclass>
    <innerclass refid="classmuda_1_1_linear_system_solve_reorder" prot="public">muda::LinearSystemSolveReorder</innerclass>
    <innerclass refid="classmuda_1_1_linear_system_solve_tolerance" prot="public">muda::LinearSystemSolveTolerance</innerclass>
    <innerclass refid="classmuda_1_1_logger" prot="public">muda::Logger</innerclass>
    <innerclass refid="classmuda_1_1_logger_data_container" prot="public">muda::LoggerDataContainer</innerclass>
    <innerclass refid="classmuda_1_1_logger_meta_data" prot="public">muda::LoggerMetaData</innerclass>
    <innerclass refid="classmuda_1_1_logger_viewer" prot="public">muda::LoggerViewer</innerclass>
    <innerclass refid="classmuda_1_1logic__error" prot="public">muda::logic_error</innerclass>
    <innerclass refid="classmuda_1_1_log_proxy" prot="public">muda::LogProxy</innerclass>
    <innerclass refid="classmuda_1_1_matrix_format_converter" prot="public">muda::MatrixFormatConverter</innerclass>
    <innerclass refid="classmuda_1_1_matrix_map_info" prot="public">muda::MatrixMapInfo</innerclass>
    <innerclass refid="classmuda_1_1_memcpy_node" prot="public">muda::MemcpyNode</innerclass>
    <innerclass refid="classmuda_1_1_memory" prot="public">muda::Memory</innerclass>
    <innerclass refid="classmuda_1_1_memset_node" prot="public">muda::MemsetNode</innerclass>
    <innerclass refid="classmuda_1_1_n_d_reshaper" prot="public">muda::NDReshaper</innerclass>
    <innerclass refid="classmuda_1_1_node_id" prot="public">muda::NodeId</innerclass>
    <innerclass refid="classmuda_1_1_node_parms" prot="public">muda::NodeParms</innerclass>
    <innerclass refid="classmuda_1_1not__implemented" prot="public">muda::not_implemented</innerclass>
    <innerclass refid="classmuda_1_1_offset2_d" prot="public">muda::Offset2D</innerclass>
    <innerclass refid="classmuda_1_1_offset3_d" prot="public">muda::Offset3D</innerclass>
    <innerclass refid="classmuda_1_1out__of__range" prot="public">muda::out_of_range</innerclass>
    <innerclass refid="classmuda_1_1_parallel_for" prot="public">muda::ParallelFor</innerclass>
    <innerclass refid="classmuda_1_1_parallel_for_details" prot="public">muda::ParallelForDetails</innerclass>
    <innerclass refid="classmuda_1_1_profile" prot="public">muda::Profile</innerclass>
    <innerclass refid="classmuda_1_1_range_name" prot="public">muda::RangeName</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer" prot="public">muda::read_only_viewer</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_b_s_r_matrix_view_3_01_ty_00_01_n_01_4_01_4" prot="public">muda::read_only_viewer&lt; BSRMatrixView&lt; Ty, N &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_buffer2_d_view_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; Buffer2DView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_buffer3_d_view_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; Buffer3DView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_buffer_view_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; BufferView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_c_o_o_matrix_view_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; COOMatrixView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_c_o_o_vector_view_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; COOVectorView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_c_s_r_matrix_view_3_01_ty_01_4_01_4" prot="public">muda::read_only_viewer&lt; CSRMatrixView&lt; Ty &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01cuda_event__t_01_4" prot="public">muda::read_only_viewer&lt; cudaEvent_t &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_dense1_d_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; Dense1D&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_dense2_d_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; Dense2D&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_dense3_d_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; Dense3D&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_dense_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; Dense&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_dense_vector_view_3_01_ty_01_4_01_4" prot="public">muda::read_only_viewer&lt; DenseVectorView&lt; Ty &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_dense_vector_viewer_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; DenseVectorViewer&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_doublet_vector_view_3_01_ty_00_01_n_01_4_01_4" prot="public">muda::read_only_viewer&lt; DoubletVectorView&lt; Ty, N &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_field_entry_view_3_01_t_00_01_layout_00_01_m_00_01_n_01_4_01_4" prot="public">muda::read_only_viewer&lt; FieldEntryView&lt; T, Layout, M, N &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_graph_viewer_01_4" prot="public">muda::read_only_viewer&lt; GraphViewer &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01lbvh_1_1_b_v_h_viewer_3_01_real_00_01_object_01_4_01_4" prot="public">muda::read_only_viewer&lt; lbvh::BVHViewer&lt; Real, Object &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_t_01_5_01_4" prot="public">muda::read_only_viewer&lt; T * &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_triplet_matrix_view_3_01_ty_00_01_n_01_4_01_4" prot="public">muda::read_only_viewer&lt; TripletMatrixView&lt; Ty, N &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__only__viewer_3_01_var_view_3_01_t_01_4_01_4" prot="public">muda::read_only_viewer&lt; VarView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer" prot="public">muda::read_write_viewer</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_b_s_r_matrix_view_3_01_ty_00_01_n_01_4_01_4" prot="public">muda::read_write_viewer&lt; CBSRMatrixView&lt; Ty, N &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_buffer2_d_view_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CBuffer2DView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_buffer3_d_view_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CBuffer3DView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_buffer_view_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CBufferView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_c_o_o_matrix_view_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CCOOMatrixView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_c_o_o_vector_view_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CCOOVectorView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_dense1_d_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CDense1D&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_dense2_d_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CDense2D&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_dense3_d_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CDense3D&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_dense_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CDense&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_dense_vector_viewer_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CDenseVectorViewer&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_doublet_vector_view_3_01_ty_00_01_n_01_4_01_4" prot="public">muda::read_write_viewer&lt; CDoubletVectorView&lt; Ty, N &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_field_entry_view_3_01_t_00_01_layout_00_01_m_00_01_n_01_4_01_4" prot="public">muda::read_write_viewer&lt; CFieldEntryView&lt; T, Layout, M, N &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01const_01_t_01_5_01_4" prot="public">muda::read_write_viewer&lt; const T * &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_s_r_matrix_view_3_01_ty_01_4_01_4" prot="public">muda::read_write_viewer&lt; CSRMatrixView&lt; Ty &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01cuda_event__t_01_4" prot="public">muda::read_write_viewer&lt; cudaEvent_t &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_c_var_view_3_01_t_01_4_01_4" prot="public">muda::read_write_viewer&lt; CVarView&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_dense_vector_view_3_01_ty_01_4_01_4" prot="public">muda::read_write_viewer&lt; DenseVectorView&lt; Ty &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_graph_viewer_01_4" prot="public">muda::read_write_viewer&lt; GraphViewer &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01lbvh_1_1_c_b_v_h_viewer_3_01_real_00_01_object_01_4_01_4" prot="public">muda::read_write_viewer&lt; lbvh::CBVHViewer&lt; Real, Object &gt; &gt;</innerclass>
    <innerclass refid="structmuda_1_1read__write__viewer_3_01_triplet_matrix_view_3_01_ty_00_01_n_01_4_01_4" prot="public">muda::read_write_viewer&lt; TripletMatrixView&lt; Ty, N &gt; &gt;</innerclass>
    <innerclass refid="classmuda_1_1runtime__error" prot="public">muda::runtime_error</innerclass>
    <innerclass refid="classmuda_1_1_stream" prot="public">muda::Stream</innerclass>
    <innerclass refid="classmuda_1_1_sub_field" prot="public">muda::SubField</innerclass>
    <innerclass refid="classmuda_1_1_sub_field_impl" prot="public">muda::SubFieldImpl</innerclass>
    <innerclass refid="classmuda_1_1_sub_field_impl_3_01_field_entry_layout_1_1_ao_s_01_4" prot="public">muda::SubFieldImpl&lt; FieldEntryLayout::AoS &gt;</innerclass>
    <innerclass refid="classmuda_1_1_sub_field_impl_3_01_field_entry_layout_1_1_ao_so_a_01_4" prot="public">muda::SubFieldImpl&lt; FieldEntryLayout::AoSoA &gt;</innerclass>
    <innerclass refid="classmuda_1_1_sub_field_impl_3_01_field_entry_layout_1_1_so_a_01_4" prot="public">muda::SubFieldImpl&lt; FieldEntryLayout::SoA &gt;</innerclass>
    <innerclass refid="classmuda_1_1_sub_field_interface" prot="public">muda::SubFieldInterface</innerclass>
    <innerclass refid="structmuda_1_1_tag" prot="public">muda::Tag</innerclass>
    <innerclass refid="classmuda_1_1_triplet_matrix_view_base" prot="public">muda::TripletMatrixViewBase</innerclass>
    <innerclass refid="classmuda_1_1_triplet_matrix_view_base_3_01_is_const_00_01_ty_00_011_01_4" prot="public">muda::TripletMatrixViewBase&lt; IsConst, Ty, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_triplet_matrix_viewer" prot="public">muda::TripletMatrixViewer</innerclass>
    <innerclass refid="classmuda_1_1_triplet_matrix_viewer_3_01_t_00_011_01_4" prot="public">muda::TripletMatrixViewer&lt; T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_triplet_matrix_viewer_base" prot="public">muda::TripletMatrixViewerBase</innerclass>
    <innerclass refid="classmuda_1_1_triplet_matrix_viewer_base_3_01_is_const_00_01_t_00_011_01_4" prot="public">muda::TripletMatrixViewerBase&lt; IsConst, T, 1 &gt;</innerclass>
    <innerclass refid="classmuda_1_1_var_id" prot="public">muda::VarId</innerclass>
    <innerclass refid="classmuda_1_1_var_view_t" prot="public">muda::VarViewT</innerclass>
    <innerclass refid="classmuda_1_1_view_base" prot="public">muda::ViewBase</innerclass>
    <innerclass refid="classmuda_1_1_viewer_base" prot="public">muda::ViewerBase</innerclass>
    <innernamespace refid="namespacemuda_1_1config">muda::config</innernamespace>
    <innernamespace refid="namespacemuda_1_1details">muda::details</innernamespace>
    <innernamespace refid="namespacemuda_1_1distance">muda::distance</innernamespace>
    <innernamespace refid="namespacemuda_1_1eigen">muda::eigen</innernamespace>
    <innernamespace refid="namespacemuda_1_1lbvh">muda::lbvh</innernamespace>
    <innernamespace refid="namespacemuda_1_1spatial__hash">muda::spatial_hash</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="compute__graph__flag_8h_1a30543d246a5f94a8bbcde13eab31d35f" prot="public" static="no" strong="yes">
        <type></type>
        <name>ComputeGraphFlag</name>
        <qualifiedname>muda::ComputeGraphFlag</qualifiedname>
        <enumvalue id="compute__graph__flag_8h_1a30543d246a5f94a8bbcde13eab31d35fa2d0fa94bebc487b697865cbf7ace6166" prot="public">
          <name>HostLaunch</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__flag_8h_1a30543d246a5f94a8bbcde13eab31d35faa0a80fa2b9421cb0bce7168f4699632b" prot="public">
          <name>DeviceLaunch</name>
          <initializer>= 2 | HostLaunch</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_flag.h" line="4" column="1" bodyfile="src/muda/compute_graph/compute_graph_flag.h" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="enum" id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>ComputeGraphNodeType</name>
        <qualifiedname>muda::ComputeGraphNodeType</qualifiedname>
        <enumvalue id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754a059d59093d2f5f5f430a7727f728ea31" prot="public">
          <name>KernelNode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754aec80707aa1cab1fc14fd56c73098aee6" prot="public">
          <name>MemcpyNode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754a922b29630434791548eb8d22084d1e24" prot="public">
          <name>MemsetNode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754a0b1f15e8aab6bdca3d297e19b547a70f" prot="public">
          <name>CaptureNode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754a406f7fa44f48eee2d012aafe63e00be2" prot="public">
          <name>EventRecordNode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754adc06cb69a7174a933948396a2cf4409a" prot="public">
          <name>EventWaitNode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__node__type_8h_1ac6446e81a7a3158a88b38439c4866754a6a061313d22e51e0f25b7cd4dc065233" prot="public">
          <name>Max</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_node_type.h" line="6" column="1" bodyfile="src/muda/compute_graph/compute_graph_node_type.h" bodystart="7" bodyend="16"/>
      </memberdef>
      <memberdef kind="enum" id="compute__graph__phase_8h_1a5d5467c880c238b6f3b5469e463374c4" prot="public" static="no" strong="yes">
        <type></type>
        <name>ComputeGraphPhase</name>
        <qualifiedname>muda::ComputeGraphPhase</qualifiedname>
        <enumvalue id="compute__graph__phase_8h_1a5d5467c880c238b6f3b5469e463374c4a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__phase_8h_1a5d5467c880c238b6f3b5469e463374c4a75315d50b18e654b5597bdb3b40e5acc" prot="public">
          <name>TopoBuilding</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__phase_8h_1a5d5467c880c238b6f3b5469e463374c4ac39b56d4489fb2507289e7ae19567b80" prot="public">
          <name>Building</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__phase_8h_1a5d5467c880c238b6f3b5469e463374c4a6909beea5b50605780e3411f879fe916" prot="public">
          <name>Updating</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__phase_8h_1a5d5467c880c238b6f3b5469e463374c4ad7c1e4b74b051ce0886b85356a97ff88" prot="public">
          <name>SerialLaunching</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__phase_8h_1a5d5467c880c238b6f3b5469e463374c4a6a061313d22e51e0f25b7cd4dc065233" prot="public">
          <name>Max</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_phase.h" line="4" column="1" bodyfile="src/muda/compute_graph/compute_graph_phase.h" bodystart="5" bodyend="12"/>
      </memberdef>
      <memberdef kind="enum" id="compute__graph__var__usage_8h_1a8957ade7d628aa2af190e698d2e46889" prot="public" static="no" strong="yes">
        <type>char</type>
        <name>ComputeGraphVarUsage</name>
        <qualifiedname>muda::ComputeGraphVarUsage</qualifiedname>
        <enumvalue id="compute__graph__var__usage_8h_1a8957ade7d628aa2af190e698d2e46889a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__var__usage_8h_1a8957ade7d628aa2af190e698d2e46889a7a1a5f3e79fdc91edf2f5ead9d66abb4" prot="public">
          <name>Read</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__var__usage_8h_1a8957ade7d628aa2af190e698d2e46889a70a2a84088d405a2e3f1e3accaa16723" prot="public">
          <name>ReadWrite</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="compute__graph__var__usage_8h_1a8957ade7d628aa2af190e698d2e46889a6a061313d22e51e0f25b7cd4dc065233" prot="public">
          <name>Max</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_var_usage.h" line="4" column="1" bodyfile="src/muda/compute_graph/compute_graph_var_usage.h" bodystart="5" bodyend="10"/>
      </memberdef>
      <memberdef kind="enum" id="field__entry__layout_8h_1aa9b46dbe425633054a2b6c5c92b0c059" prot="public" static="no" strong="yes">
        <type></type>
        <name>FieldEntryLayout</name>
        <qualifiedname>muda::FieldEntryLayout</qualifiedname>
        <enumvalue id="field__entry__layout_8h_1aa9b46dbe425633054a2b6c5c92b0c059a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="field__entry__layout_8h_1aa9b46dbe425633054a2b6c5c92b0c059a16b9d7db01fae7828de9941a0736d3d0" prot="public">
          <name>AoS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="field__entry__layout_8h_1aa9b46dbe425633054a2b6c5c92b0c059a7df366f0036440c84928f057941f8dad" prot="public">
          <name>SoA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="field__entry__layout_8h_1aa9b46dbe425633054a2b6c5c92b0c059a33d586e4026fa37cd8cc94b2565b4175" prot="public">
          <name>AoSoA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="field__entry__layout_8h_1aa9b46dbe425633054a2b6c5c92b0c059acf46874ba6aadf696119312d3c8e5d93" prot="public">
          <name>RuntimeLayout</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/field/field_entry_layout.h" line="7" column="1" bodyfile="src/muda/ext/field/field_entry_layout.h" bodystart="8" bodyend="21"/>
      </memberdef>
      <memberdef kind="enum" id="field__entry__type_8h_1aea21cd11a2550c34e3d595961892cea6" prot="public" static="no" strong="yes">
        <type></type>
        <name>FieldEntryType</name>
        <qualifiedname>muda::FieldEntryType</qualifiedname>
        <enumvalue id="field__entry__type_8h_1aea21cd11a2550c34e3d595961892cea6a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="field__entry__type_8h_1aea21cd11a2550c34e3d595961892cea6af60357a8d17e45793298323f1b372a74" prot="public">
          <name>Scalar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="field__entry__type_8h_1aea21cd11a2550c34e3d595961892cea6a57dea6f5039281b7fee517fc43bf3110" prot="public">
          <name>Vector</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="field__entry__type_8h_1aea21cd11a2550c34e3d595961892cea6af53df0293e169f562bc1d9a20e1d2589" prot="public">
          <name>Matrix</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="field__entry__type_8h_1aea21cd11a2550c34e3d595961892cea6a497031794414a552435f90151ac3b54b" prot="public">
          <name>Object</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/field/field_entry_type.h" line="5" column="1" bodyfile="src/muda/ext/field/field_entry_type.h" bodystart="6" bodyend="12"/>
      </memberdef>
      <memberdef kind="enum" id="linear__system__solve__reorder_8h_1ae5eabf0b9342f3eadffacb90725fa052" prot="public" static="no" strong="yes">
        <type></type>
        <name>LinearSystemReorderMethod</name>
        <qualifiedname>muda::LinearSystemReorderMethod</qualifiedname>
        <enumvalue id="linear__system__solve__reorder_8h_1ae5eabf0b9342f3eadffacb90725fa052a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linear__system__solve__reorder_8h_1ae5eabf0b9342f3eadffacb90725fa052af07b29c70c7d190e9a9a64c0db6fc9fe" prot="public">
          <name>Symrcm</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linear__system__solve__reorder_8h_1ae5eabf0b9342f3eadffacb90725fa052a784c4b53c83f7545351b44592412907d" prot="public">
          <name>Symamd</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linear__system__solve__reorder_8h_1ae5eabf0b9342f3eadffacb90725fa052af842bb072038dc4cc45f5657313fd8ab" prot="public">
          <name>Csrmetisnd</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/linear_system_solve_reorder.h" line="3" column="1" bodyfile="src/muda/ext/linear_system/linear_system_solve_reorder.h" bodystart="4" bodyend="9"/>
      </memberdef>
      <memberdef kind="enum" id="graph__instantiate__flag_8h_1af8ed99b99cfeffe54406389de3e4a8b6" prot="public" static="no" strong="yes">
        <type></type>
        <name>GraphInstantiateFlagBit</name>
        <qualifiedname>muda::GraphInstantiateFlagBit</qualifiedname>
        <enumvalue id="graph__instantiate__flag_8h_1af8ed99b99cfeffe54406389de3e4a8b6a3f3a8863552bc846ea08749b3746bfd2" prot="public">
          <name>FreeOnLaunch</name>
          <initializer>= CUgraphInstantiate_flags::CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="graph__instantiate__flag_8h_1af8ed99b99cfeffe54406389de3e4a8b6a91412465ea9169dfd901dd5e7c96dd99" prot="public">
          <name>Upload</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="graph__instantiate__flag_8h_1af8ed99b99cfeffe54406389de3e4a8b6aa0a80fa2b9421cb0bce7168f4699632b" prot="public">
          <name>DeviceLaunch</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="graph__instantiate__flag_8h_1af8ed99b99cfeffe54406389de3e4a8b6a229f1b6d3d932943f4446801faf88730" prot="public">
          <name>UseNodePriority</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/graph/graph_instantiate_flag.h" line="6" column="1" bodyfile="src/muda/graph/graph_instantiate_flag.h" bodystart="7" bodyend="18"/>
      </memberdef>
      <memberdef kind="enum" id="parallel__for_8h_1af14a2b7a03f24dc4f4b38842841bfc63" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>ParallelForType</name>
        <qualifiedname>muda::ParallelForType</qualifiedname>
        <enumvalue id="parallel__for_8h_1af14a2b7a03f24dc4f4b38842841bfc63a9f29d0faece65da555e222f399801fc4" prot="public">
          <name>DynamicBlocks</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="parallel__for_8h_1af14a2b7a03f24dc4f4b38842841bfc63a06844f9298fbfd225d6a297e10325dbb" prot="public">
          <name>GridStrideLoop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/parallel_for.h" line="43" column="1" bodyfile="src/muda/launch/parallel_for.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6" prot="public" static="no" strong="yes">
        <type>uint16_t</type>
        <name>LoggerBasicType</name>
        <qualifiedname>muda::LoggerBasicType</qualifiedname>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a7d839b2c12bfd40ac121b4cc9e81c539" prot="public">
          <name>Int8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a39bc2ae44b184207f560ff8619823208" prot="public">
          <name>Int16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a1686a6c336b71b36d77354cea19a8b52" prot="public">
          <name>Int</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6ac06129f6e6e15c09328365e553f1dc31" prot="public">
          <name>Int32</name>
          <initializer>= Int</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6afbde23b11d7e59af7828e81144c8b487" prot="public">
          <name>Int64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a8394f0347c184cf156ac5924dccb773b" prot="public">
          <name>Long</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a01e860997dda761b240fb216f1aa114b" prot="public">
          <name>LongLong</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6ab31df9c476d20e85ff898121efe11b5a" prot="public">
          <name>UInt8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a8bd950a9d7779b83f5c30046c9aaf1cf" prot="public">
          <name>UInt16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a0b1291eded63143ac04709711274785a" prot="public">
          <name>UInt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6ae7956ed7be1c5025a27ed3cb42a396bd" prot="public">
          <name>UInt32</name>
          <initializer>= UInt</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6aaf71234725f0470ccf993e263a8b820a" prot="public">
          <name>UInt64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a43963b8459ea654be36f373f1a036182" prot="public">
          <name>ULong</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a84a1d9f2b0b950d3e43f1afe65413ab2" prot="public">
          <name>ULongLong</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a22ae0e2b89e5e3d477f988cc36d3272b" prot="public">
          <name>Float</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6ad909d38d705ce75386dd86e611a82f5b" prot="public">
          <name>Double</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a27118326006d3829667a400ad23d5d98" prot="public">
          <name>String</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a4ffeb762908a8564c1b7a74967f7239d" prot="public">
          <name>FmtString</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="logger__basic__data_8h_1a64643c0d561875e3d7023f7e3a269df6a497031794414a552435f90151ac3b54b" prot="public">
          <name>Object</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_basic_data.h" line="6" column="1" bodyfile="src/muda/logger/logger_basic_data.h" bodystart="7" bodyend="32"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="buffer__2d__view_8h_1aa84e3adbe5239df70a1afd937f3d101d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_buffer2_d_view_t" kindref="compound">Buffer2DViewT</ref>&lt; false, T &gt;</type>
        <definition>using muda::Buffer2DView = typedef Buffer2DViewT&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>Buffer2DView</name>
        <qualifiedname>muda::Buffer2DView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/buffer_2d_view.h" line="103" column="1" bodyfile="src/muda/buffer/buffer_2d_view.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="buffer__2d__view_8h_1a86a62b615ea4c740284f3374c7127ee8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_buffer2_d_view_t" kindref="compound">Buffer2DViewT</ref>&lt; true, T &gt;</type>
        <definition>using muda::CBuffer2DView = typedef Buffer2DViewT&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CBuffer2DView</name>
        <qualifiedname>muda::CBuffer2DView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/buffer_2d_view.h" line="106" column="1" bodyfile="src/muda/buffer/buffer_2d_view.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="buffer__3d__view_8h_1a07eab96eb68bab0423dfac5e4be1d257" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_buffer3_d_view_t" kindref="compound">Buffer3DViewT</ref>&lt; false, T &gt;</type>
        <definition>using muda::Buffer3DView = typedef Buffer3DViewT&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>Buffer3DView</name>
        <qualifiedname>muda::Buffer3DView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/buffer_3d_view.h" line="111" column="1" bodyfile="src/muda/buffer/buffer_3d_view.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="buffer__3d__view_8h_1a974801160d1bf8d53b85c35ed34321de" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_buffer3_d_view_t" kindref="compound">Buffer3DViewT</ref>&lt; true, T &gt;</type>
        <definition>using muda::CBuffer3DView = typedef Buffer3DViewT&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CBuffer3DView</name>
        <qualifiedname>muda::CBuffer3DView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/buffer_3d_view.h" line="114" column="1" bodyfile="src/muda/buffer/buffer_3d_view.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="buffer__fwd_8h_1a5f6d76a8a0dc38a77c5b47b620ba21db" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_var_view_t" kindref="compound">VarViewT</ref>&lt; false, T &gt;</type>
        <definition>using muda::VarView = typedef VarViewT&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>VarView</name>
        <qualifiedname>muda::VarView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/buffer_fwd.h" line="9" column="1" bodyfile="src/muda/buffer/buffer_fwd.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="buffer__fwd_8h_1a61bb8864ca2a3fcf98018fbb63801678" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_var_view_t" kindref="compound">VarViewT</ref>&lt; true, T &gt;</type>
        <definition>using muda::CVarView = typedef VarViewT&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CVarView</name>
        <qualifiedname>muda::CVarView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/buffer_fwd.h" line="12" column="1" bodyfile="src/muda/buffer/buffer_fwd.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="buffer__fwd_8h_1a5899957b54eed3b1ed473bac58cfab04" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_buffer_view_t" kindref="compound">BufferViewT</ref>&lt; false, T &gt;</type>
        <definition>using muda::BufferView = typedef BufferViewT&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>BufferView</name>
        <qualifiedname>muda::BufferView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/buffer_fwd.h" line="19" column="1" bodyfile="src/muda/buffer/buffer_fwd.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="buffer__fwd_8h_1a91100303baea98b78697556c39de78f1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_buffer_view_t" kindref="compound">BufferViewT</ref>&lt; true, T &gt;</type>
        <definition>using muda::CBufferView = typedef BufferViewT&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CBufferView</name>
        <qualifiedname>muda::CBufferView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/buffer/buffer_fwd.h" line="22" column="1" bodyfile="src/muda/buffer/buffer_fwd.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="compute__graph__event__node_8h_1a9e2f6bc0518bcf263220253a902efadc" prot="public" static="no">
        <type><ref refid="classmuda_1_1_compute_graph_node" kindref="compound">ComputeGraphNode</ref>&lt; <ref refid="classmuda_1_1_event_record_node" kindref="compound">EventRecordNode</ref>, ComputeGraphNodeType::EventRecordNode &gt;</type>
        <definition>using muda::ComputeGraphEventRecordNode = typedef ComputeGraphNode&lt;EventRecordNode, ComputeGraphNodeType::EventRecordNode&gt;</definition>
        <argsstring></argsstring>
        <name>ComputeGraphEventRecordNode</name>
        <qualifiedname>muda::ComputeGraphEventRecordNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/nodes/compute_graph_event_node.h" line="9" column="1" bodyfile="src/muda/compute_graph/nodes/compute_graph_event_node.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="compute__graph__event__node_8h_1ac613ab01740fd9b4772ca822d758d22e" prot="public" static="no">
        <type><ref refid="classmuda_1_1_compute_graph_node" kindref="compound">ComputeGraphNode</ref>&lt; <ref refid="classmuda_1_1_event_wait_node" kindref="compound">EventWaitNode</ref>, ComputeGraphNodeType::EventWaitNode &gt;</type>
        <definition>using muda::ComputeGraphEventWaitNode = typedef ComputeGraphNode&lt;EventWaitNode, ComputeGraphNodeType::EventWaitNode&gt;</definition>
        <argsstring></argsstring>
        <name>ComputeGraphEventWaitNode</name>
        <qualifiedname>muda::ComputeGraphEventWaitNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/nodes/compute_graph_event_node.h" line="11" column="1" bodyfile="src/muda/compute_graph/nodes/compute_graph_event_node.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="compute__graph__kernel__node_8h_1adf1d9d78425aefb2d1ac7c9ed00049d8" prot="public" static="no">
        <type><ref refid="classmuda_1_1_compute_graph_node" kindref="compound">ComputeGraphNode</ref>&lt; <ref refid="classmuda_1_1_kernel_node" kindref="compound">KernelNode</ref>, ComputeGraphNodeType::KernelNode &gt;</type>
        <definition>using muda::ComputeGraphKernelNode = typedef ComputeGraphNode&lt;KernelNode, ComputeGraphNodeType::KernelNode&gt;</definition>
        <argsstring></argsstring>
        <name>ComputeGraphKernelNode</name>
        <qualifiedname>muda::ComputeGraphKernelNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/nodes/compute_graph_kernel_node.h" line="8" column="1" bodyfile="src/muda/compute_graph/nodes/compute_graph_kernel_node.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="compute__graph__memory__node_8h_1a522bf0d36503928f14d71158c28d7d5b" prot="public" static="no">
        <type><ref refid="classmuda_1_1_compute_graph_node" kindref="compound">ComputeGraphNode</ref>&lt; <ref refid="classmuda_1_1_memcpy_node" kindref="compound">MemcpyNode</ref>, ComputeGraphNodeType::MemcpyNode &gt;</type>
        <definition>using muda::ComputeGraphMemcpyNode = typedef ComputeGraphNode&lt;MemcpyNode, ComputeGraphNodeType::MemcpyNode&gt;</definition>
        <argsstring></argsstring>
        <name>ComputeGraphMemcpyNode</name>
        <qualifiedname>muda::ComputeGraphMemcpyNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/nodes/compute_graph_memory_node.h" line="9" column="1" bodyfile="src/muda/compute_graph/nodes/compute_graph_memory_node.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="compute__graph__memory__node_8h_1afe0e5938b9da66f642301950ac60669d" prot="public" static="no">
        <type><ref refid="classmuda_1_1_compute_graph_node" kindref="compound">ComputeGraphNode</ref>&lt; <ref refid="classmuda_1_1_memset_node" kindref="compound">MemsetNode</ref>, ComputeGraphNodeType::MemsetNode &gt;</type>
        <definition>using muda::ComputeGraphMemsetNode = typedef ComputeGraphNode&lt;MemsetNode, ComputeGraphNodeType::MemsetNode&gt;</definition>
        <argsstring></argsstring>
        <name>ComputeGraphMemsetNode</name>
        <qualifiedname>muda::ComputeGraphMemsetNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/nodes/compute_graph_memory_node.h" line="12" column="1" bodyfile="src/muda/compute_graph/nodes/compute_graph_memory_node.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="util__type_8h_1aec6189d1fcdfdec12b5f821a078a89a6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>cub::KeyValuePair&lt; Key, Value &gt;</type>
        <definition>using muda::KeyValuePair = typedef cub::KeyValuePair&lt;Key, Value&gt;</definition>
        <argsstring></argsstring>
        <name>KeyValuePair</name>
        <qualifiedname>muda::KeyValuePair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/cub/util_type.h" line="6" column="1" bodyfile="src/muda/cub/util_type.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__matrix__view_8h_1a27c695a650f239fc2e80fd957caaa1af" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_triplet_matrix_view_base" kindref="compound">TripletMatrixView</ref>&lt; T, N &gt;</type>
        <definition>using muda::BCOOMatrixView = typedef TripletMatrixView&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>BCOOMatrixView</name>
        <qualifiedname>muda::BCOOMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_matrix_view.h" line="7" column="1" bodyfile="src/muda/ext/linear_system/bcoo_matrix_view.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__matrix__view_8h_1a9792cad160bdfb8a35107309f61324c9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_triplet_matrix_view_base" kindref="compound">CTripletMatrixView</ref>&lt; T, N &gt;</type>
        <definition>using muda::CBCOOMatrixView = typedef CTripletMatrixView&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>CBCOOMatrixView</name>
        <qualifiedname>muda::CBCOOMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_matrix_view.h" line="9" column="1" bodyfile="src/muda/ext/linear_system/bcoo_matrix_view.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__matrix__view_8h_1a7965b78eb4a5308f580d2bc7d4f7d948" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_o_o_matrix_view_base" kindref="compound">COOMatrixViewBase</ref>&lt; false, Ty &gt;</type>
        <definition>using muda::COOMatrixView = typedef COOMatrixViewBase&lt;false, Ty&gt;</definition>
        <argsstring></argsstring>
        <name>COOMatrixView</name>
        <qualifiedname>muda::COOMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_matrix_view.h" line="206" column="1" bodyfile="src/muda/ext/linear_system/bcoo_matrix_view.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__matrix__view_8h_1a3ede241ebfc2faf9fea10aeb7912f82a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_o_o_matrix_view_base" kindref="compound">COOMatrixViewBase</ref>&lt; true, Ty &gt;</type>
        <definition>using muda::CCOOMatrixView = typedef COOMatrixViewBase&lt;true, Ty&gt;</definition>
        <argsstring></argsstring>
        <name>CCOOMatrixView</name>
        <qualifiedname>muda::CCOOMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_matrix_view.h" line="208" column="1" bodyfile="src/muda/ext/linear_system/bcoo_matrix_view.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__matrix__viewer_8h_1a3cd1c38a17c4e12c58b245fc81438189" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_triplet_matrix_viewer" kindref="compound">CTripletMatrixViewer</ref>&lt; T, N &gt;</type>
        <definition>using muda::BCOOMatrixViewer = typedef CTripletMatrixViewer&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>BCOOMatrixViewer</name>
        <qualifiedname>muda::BCOOMatrixViewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_matrix_viewer.h" line="6" column="1" bodyfile="src/muda/ext/linear_system/bcoo_matrix_viewer.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__matrix__viewer_8h_1abae9020c73e4e0a8af3b0f5ea2ebf15c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_triplet_matrix_viewer" kindref="compound">CTripletMatrixViewer</ref>&lt; T, N &gt;</type>
        <definition>using muda::CBCOOMatrixViewer = typedef CTripletMatrixViewer&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>CBCOOMatrixViewer</name>
        <qualifiedname>muda::CBCOOMatrixViewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_matrix_viewer.h" line="9" column="1" bodyfile="src/muda/ext/linear_system/bcoo_matrix_viewer.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__matrix__viewer_8h_1a557bc623adf1bfc23c35ded0f9ed80a1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_triplet_matrix_viewer" kindref="compound">BCOOMatrixViewer</ref>&lt; T, 1 &gt;</type>
        <definition>using muda::COOMatrixViewer = typedef BCOOMatrixViewer&lt;T, 1&gt;</definition>
        <argsstring></argsstring>
        <name>COOMatrixViewer</name>
        <qualifiedname>muda::COOMatrixViewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_matrix_viewer.h" line="12" column="1" bodyfile="src/muda/ext/linear_system/bcoo_matrix_viewer.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__matrix__viewer_8h_1a4de90d6168407a703de6adbef5ebb8b9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_triplet_matrix_viewer" kindref="compound">CBCOOMatrixViewer</ref>&lt; T, 1 &gt;</type>
        <definition>using muda::CCOOMatrixViewer = typedef CBCOOMatrixViewer&lt;T, 1&gt;</definition>
        <argsstring></argsstring>
        <name>CCOOMatrixViewer</name>
        <qualifiedname>muda::CCOOMatrixViewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_matrix_viewer.h" line="15" column="1" bodyfile="src/muda/ext/linear_system/bcoo_matrix_viewer.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__vector__view_8h_1af6e8ece7a420798448acfbf983b19d44" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_doublet_vector_view_base" kindref="compound">DoubletVectorView</ref>&lt; T, N &gt;</type>
        <definition>using muda::BCOOVectorView = typedef DoubletVectorView&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>BCOOVectorView</name>
        <qualifiedname>muda::BCOOVectorView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_vector_view.h" line="9" column="1" bodyfile="src/muda/ext/linear_system/bcoo_vector_view.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__vector__view_8h_1a9f6f6d3148c59b149f2057b63c6f9dd8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_doublet_vector_view_base" kindref="compound">CDoubletVectorView</ref>&lt; T, N &gt;</type>
        <definition>using muda::CBCOOVectorView = typedef CDoubletVectorView&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>CBCOOVectorView</name>
        <qualifiedname>muda::CBCOOVectorView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_vector_view.h" line="11" column="1" bodyfile="src/muda/ext/linear_system/bcoo_vector_view.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__vector__view_8h_1ada03920b084f9222cc4ad676d340c4c0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_o_o_vector_view_base" kindref="compound">COOVectorViewBase</ref>&lt; false, T &gt;</type>
        <definition>using muda::COOVectorView = typedef COOVectorViewBase&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>COOVectorView</name>
        <qualifiedname>muda::COOVectorView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_vector_view.h" line="145" column="1" bodyfile="src/muda/ext/linear_system/bcoo_vector_view.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__vector__view_8h_1ad26dcbfe74d08e4aa162eb1286acd100" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_o_o_vector_view_base" kindref="compound">COOVectorViewBase</ref>&lt; true, T &gt;</type>
        <definition>using muda::CCOOVectorView = typedef COOVectorViewBase&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CCOOVectorView</name>
        <qualifiedname>muda::CCOOVectorView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_vector_view.h" line="147" column="1" bodyfile="src/muda/ext/linear_system/bcoo_vector_view.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__vector__viewer_8h_1a51100504bc5260a4fc8b4598a97eb0f1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_doublet_vector_viewer" kindref="compound">CDoubletVectorViewer</ref>&lt; T, N &gt;</type>
        <definition>using muda::BCOOVectorViewer = typedef CDoubletVectorViewer&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>BCOOVectorViewer</name>
        <qualifiedname>muda::BCOOVectorViewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_vector_viewer.h" line="6" column="1" bodyfile="src/muda/ext/linear_system/bcoo_vector_viewer.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__vector__viewer_8h_1abfedeaf3084ce1a29e3b93cca46294d7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_doublet_vector_viewer" kindref="compound">CDoubletVectorViewer</ref>&lt; T, N &gt;</type>
        <definition>using muda::CBCOOVectorViewer = typedef CDoubletVectorViewer&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>CBCOOVectorViewer</name>
        <qualifiedname>muda::CBCOOVectorViewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_vector_viewer.h" line="9" column="1" bodyfile="src/muda/ext/linear_system/bcoo_vector_viewer.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__vector__viewer_8h_1ae35f129cd8b97e04e0c01a773ed88a6c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_doublet_vector_viewer" kindref="compound">BCOOVectorViewer</ref>&lt; T, 1 &gt;</type>
        <definition>using muda::COOVectorViewer = typedef BCOOVectorViewer&lt;T, 1&gt;</definition>
        <argsstring></argsstring>
        <name>COOVectorViewer</name>
        <qualifiedname>muda::COOVectorViewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_vector_viewer.h" line="12" column="1" bodyfile="src/muda/ext/linear_system/bcoo_vector_viewer.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bcoo__vector__viewer_8h_1a2442b69c7dfd941d0f8556db3ae3c605" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_doublet_vector_viewer" kindref="compound">CBCOOVectorViewer</ref>&lt; T, 1 &gt;</type>
        <definition>using muda::CCOOVectorViewer = typedef CBCOOVectorViewer&lt;T, 1&gt;</definition>
        <argsstring></argsstring>
        <name>CCOOVectorViewer</name>
        <qualifiedname>muda::CCOOVectorViewer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bcoo_vector_viewer.h" line="15" column="1" bodyfile="src/muda/ext/linear_system/bcoo_vector_viewer.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bsr__matrix__view_8h_1a24705a83f8e9a23230d2f1f57e5739f5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_b_s_r_matrix_view_base" kindref="compound">BSRMatrixViewBase</ref>&lt; false, Ty, N &gt;</type>
        <definition>using muda::BSRMatrixView = typedef BSRMatrixViewBase&lt;false, Ty, N&gt;</definition>
        <argsstring></argsstring>
        <name>BSRMatrixView</name>
        <qualifiedname>muda::BSRMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bsr_matrix_view.h" line="110" column="1" bodyfile="src/muda/ext/linear_system/bsr_matrix_view.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bsr__matrix__view_8h_1a69df07e1dd28d81ddb413c00f7072773" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_b_s_r_matrix_view_base" kindref="compound">BSRMatrixViewBase</ref>&lt; true, Ty, N &gt;</type>
        <definition>using muda::CBSRMatrixView = typedef BSRMatrixViewBase&lt;true, Ty, N&gt;</definition>
        <argsstring></argsstring>
        <name>CBSRMatrixView</name>
        <qualifiedname>muda::CBSRMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/bsr_matrix_view.h" line="112" column="1" bodyfile="src/muda/ext/linear_system/bsr_matrix_view.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="csr__matrix__view_8h_1a42607d147e657f3950b473ed72edd9ab" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_s_r_matrix_view_base" kindref="compound">CSRMatrixViewBase</ref>&lt; false, Ty &gt;</type>
        <definition>using muda::CSRMatrixView = typedef CSRMatrixViewBase&lt;false, Ty&gt;</definition>
        <argsstring></argsstring>
        <name>CSRMatrixView</name>
        <qualifiedname>muda::CSRMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/csr_matrix_view.h" line="89" column="1" bodyfile="src/muda/ext/linear_system/csr_matrix_view.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="csr__matrix__view_8h_1ae2687328e5d50f600dbef9ccc60ccee5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_c_s_r_matrix_view_base" kindref="compound">CSRMatrixViewBase</ref>&lt; true, Ty &gt;</type>
        <definition>using muda::CCSRMatrixView = typedef CSRMatrixViewBase&lt;true, Ty&gt;</definition>
        <argsstring></argsstring>
        <name>CCSRMatrixView</name>
        <qualifiedname>muda::CCSRMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/csr_matrix_view.h" line="91" column="1" bodyfile="src/muda/ext/linear_system/csr_matrix_view.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__vector__view_8h_1a05d6115e96b6618dacc39edca1c9b8b7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense_vector_view_base" kindref="compound">DenseVectorViewBase</ref>&lt; false, Ty &gt;</type>
        <definition>using muda::DenseVectorView = typedef DenseVectorViewBase&lt;false, Ty&gt;</definition>
        <argsstring></argsstring>
        <name>DenseVectorView</name>
        <qualifiedname>muda::DenseVectorView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/dense_vector_view.h" line="117" column="1" bodyfile="src/muda/ext/linear_system/dense_vector_view.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__vector__view_8h_1a3adc5a3ef06f7572be2b6dfecaf720fa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense_vector_view_base" kindref="compound">DenseVectorViewBase</ref>&lt; true, Ty &gt;</type>
        <definition>using muda::CDenseVectorView = typedef DenseVectorViewBase&lt;true, Ty&gt;</definition>
        <argsstring></argsstring>
        <name>CDenseVectorView</name>
        <qualifiedname>muda::CDenseVectorView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/dense_vector_view.h" line="119" column="1" bodyfile="src/muda/ext/linear_system/dense_vector_view.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="device__bcoo__matrix_8h_1a487e9240b7b142c7da63c50cb5983257" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_device_b_c_o_o_matrix" kindref="compound">DeviceBCOOMatrix</ref>&lt; T, 1 &gt;</type>
        <definition>using muda::DeviceCOOMatrix = typedef DeviceBCOOMatrix&lt;T, 1&gt;</definition>
        <argsstring></argsstring>
        <name>DeviceCOOMatrix</name>
        <qualifiedname>muda::DeviceCOOMatrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/device_bcoo_matrix.h" line="180" column="1" bodyfile="src/muda/ext/linear_system/device_bcoo_matrix.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="device__bcoo__vector_8h_1a91f0e2a0d3d581122f0656f935a21be6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_device_b_c_o_o_vector" kindref="compound">DeviceBCOOVector</ref>&lt; T, 1 &gt;</type>
        <definition>using muda::DeviceCOOVector = typedef DeviceBCOOVector&lt;T, 1&gt;</definition>
        <argsstring></argsstring>
        <name>DeviceCOOVector</name>
        <qualifiedname>muda::DeviceCOOVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/device_bcoo_vector.h" line="101" column="1" bodyfile="src/muda/ext/linear_system/device_bcoo_vector.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="doublet__vector__view_8h_1a080b7d389af727bb164cef343b96cfb1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_doublet_vector_view_base" kindref="compound">DoubletVectorViewBase</ref>&lt; false, T, N &gt;</type>
        <definition>using muda::DoubletVectorView = typedef DoubletVectorViewBase&lt;false, T, N&gt;</definition>
        <argsstring></argsstring>
        <name>DoubletVectorView</name>
        <qualifiedname>muda::DoubletVectorView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/doublet_vector_view.h" line="368" column="1" bodyfile="src/muda/ext/linear_system/doublet_vector_view.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="doublet__vector__view_8h_1a57e8115a89e3c754239b40b3f2da19c7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_doublet_vector_view_base" kindref="compound">DoubletVectorViewBase</ref>&lt; true, T, N &gt;</type>
        <definition>using muda::CDoubletVectorView = typedef DoubletVectorViewBase&lt;true, T, N&gt;</definition>
        <argsstring></argsstring>
        <name>CDoubletVectorView</name>
        <qualifiedname>muda::CDoubletVectorView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/doublet_vector_view.h" line="370" column="1" bodyfile="src/muda/ext/linear_system/doublet_vector_view.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="triplet__matrix__view_8h_1a3ee038109a4edc59bc1973ad556539a0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_triplet_matrix_view_base" kindref="compound">TripletMatrixViewBase</ref>&lt; false, Ty, N &gt;</type>
        <definition>using muda::TripletMatrixView = typedef TripletMatrixViewBase&lt;false, Ty, N&gt;</definition>
        <argsstring></argsstring>
        <name>TripletMatrixView</name>
        <qualifiedname>muda::TripletMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/triplet_matrix_view.h" line="499" column="1" bodyfile="src/muda/ext/linear_system/triplet_matrix_view.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="triplet__matrix__view_8h_1ac28a9af9b6d6ac0ac6fd478441f52021" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Ty</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_triplet_matrix_view_base" kindref="compound">TripletMatrixViewBase</ref>&lt; true, Ty, N &gt;</type>
        <definition>using muda::CTripletMatrixView = typedef TripletMatrixViewBase&lt;true, Ty, N&gt;</definition>
        <argsstring></argsstring>
        <name>CTripletMatrixView</name>
        <qualifiedname>muda::CTripletMatrixView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/triplet_matrix_view.h" line="501" column="1" bodyfile="src/muda/ext/linear_system/triplet_matrix_view.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="kernel__tag_8h_1a90861639c3037c869296cd0ebeeaf6b5" prot="public" static="no">
        <type><ref refid="structmuda_1_1_tag" kindref="compound">Tag</ref>&lt; <ref refid="structmuda_1_1_default" kindref="compound">Default</ref> &gt;</type>
        <definition>using muda::DefaultTag = typedef Tag&lt;Default&gt;</definition>
        <argsstring></argsstring>
        <name>DefaultTag</name>
        <qualifiedname>muda::DefaultTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/kernel_tag.h" line="13" column="1" bodyfile="src/muda/launch/kernel_tag.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="logger__basic__data_8h_1a51ef7f16121c6273a2a8f9f6f1f5fc16" prot="public" static="no">
        <type>void(*)(void *formatter, const void *obj)</type>
        <definition>using muda::LoggerFmtArg = typedef void (*)(void* formatter, const void* obj)</definition>
        <argsstring></argsstring>
        <name>LoggerFmtArg</name>
        <qualifiedname>muda::LoggerFmtArg</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_basic_data.h" line="34" column="1" bodyfile="src/muda/logger/logger_basic_data.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="span_8h_1a9a44959b04cd3380fc978795f55ac9cc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>tcb::span&lt; T &gt;</type>
        <definition>using muda::span = typedef tcb::span&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>span</name>
        <qualifiedname>muda::span</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/mstl/span.h" line="14" column="1" bodyfile="src/muda/mstl/span.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="id__with__type_8h_1afbe2380fb9310a629c29688c0ed1a5a0" prot="public" static="no">
        <type><ref refid="classmuda_1_1_id_with_type" kindref="compound">IdWithType</ref>&lt; uint64_t &gt;</type>
        <definition>using muda::U64IdWithType = typedef IdWithType&lt;uint64_t&gt;</definition>
        <argsstring></argsstring>
        <name>U64IdWithType</name>
        <qualifiedname>muda::U64IdWithType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/id_with_type.h" line="53" column="1" bodyfile="src/muda/tools/id_with_type.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="id__with__type_8h_1a8b281d9a4f5fc09d473ff93353f09a68" prot="public" static="no">
        <type><ref refid="classmuda_1_1_id_with_type" kindref="compound">IdWithType</ref>&lt; uint32_t &gt;</type>
        <definition>using muda::U32IdWithType = typedef IdWithType&lt;uint32_t&gt;</definition>
        <argsstring></argsstring>
        <name>U32IdWithType</name>
        <qualifiedname>muda::U32IdWithType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/id_with_type.h" line="54" column="1" bodyfile="src/muda/tools/id_with_type.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="id__with__type_8h_1a915c4ff3cdf663db016062b099cc9d7c" prot="public" static="no">
        <type><ref refid="classmuda_1_1_id_with_type" kindref="compound">IdWithType</ref>&lt; int64_t &gt;</type>
        <definition>using muda::I64IdWithType = typedef IdWithType&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>I64IdWithType</name>
        <qualifiedname>muda::I64IdWithType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/id_with_type.h" line="55" column="1" bodyfile="src/muda/tools/id_with_type.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="id__with__type_8h_1a25eb9a847f20ac995122cc655b725b8c" prot="public" static="no">
        <type><ref refid="classmuda_1_1_id_with_type" kindref="compound">IdWithType</ref>&lt; int32_t &gt;</type>
        <definition>using muda::I32IdWithType = typedef IdWithType&lt;int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>I32IdWithType</name>
        <qualifiedname>muda::I32IdWithType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/id_with_type.h" line="56" column="1" bodyfile="src/muda/tools/id_with_type.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__modifier_8h_1ac5cbee4d85ddebab719b6cd8547307a4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::remove_all_extents_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
        <definition>using muda::raw_type_t = typedef std::remove_all_extents_t&lt;std::remove_reference_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>raw_type_t</name>
        <qualifiedname>muda::raw_type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_modifier.h" line="13" column="1" bodyfile="src/muda/type_traits/type_modifier.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__modifier_8h_1adb7a39447c5a30822cb358c08323a49b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structmuda_1_1read__only__viewer" kindref="compound">read_only_viewer</ref>&lt; T &gt;::type</type>
        <definition>using muda::read_only_viewer_t = typedef typename read_only_viewer&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>read_only_viewer_t</name>
        <qualifiedname>muda::read_only_viewer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_modifier.h" line="33" column="1" bodyfile="src/muda/type_traits/type_modifier.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__modifier_8h_1afccb19f6fe7db9d6c6854a55c361f6db" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structmuda_1_1read__write__viewer" kindref="compound">read_write_viewer</ref>&lt; T &gt;::type</type>
        <definition>using muda::read_write_viewer_t = typedef typename read_write_viewer&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>read_write_viewer_t</name>
        <qualifiedname>muda::read_write_viewer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_modifier.h" line="39" column="1" bodyfile="src/muda/type_traits/type_modifier.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__0d_8h_1a0147a3b59a042bf32fd753006208b7ba" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense_viewer_t" kindref="compound">DenseViewerT</ref>&lt; false, T &gt;</type>
        <definition>using muda::Dense = typedef DenseViewerT&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>Dense</name>
        <qualifiedname>muda::Dense</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_0d.h" line="93" column="1" bodyfile="src/muda/viewer/dense/dense_0d.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__0d_8h_1a8fe8025d14dc802db5a3bf6763b6f91d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense_viewer_t" kindref="compound">DenseViewerT</ref>&lt; true, T &gt;</type>
        <definition>using muda::CDense = typedef DenseViewerT&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CDense</name>
        <qualifiedname>muda::CDense</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_0d.h" line="96" column="1" bodyfile="src/muda/viewer/dense/dense_0d.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__1d_8h_1a6dba336e5fc8e729a4206bcf15d39ac3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense1_d_t" kindref="compound">Dense1DT</ref>&lt; false, T &gt;</type>
        <definition>using muda::Dense1D = typedef Dense1DT&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>Dense1D</name>
        <qualifiedname>muda::Dense1D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_1d.h" line="144" column="1" bodyfile="src/muda/viewer/dense/dense_1d.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__1d_8h_1a395c6dcd2bc65833a5626e9c058fa274" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense1_d_t" kindref="compound">Dense1DT</ref>&lt; true, T &gt;</type>
        <definition>using muda::CDense1D = typedef Dense1DT&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CDense1D</name>
        <qualifiedname>muda::CDense1D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_1d.h" line="147" column="1" bodyfile="src/muda/viewer/dense/dense_1d.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__2d_8h_1afa263fc22baac6d51fa4ce7a8228519d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense2_d_base" kindref="compound">Dense2DBase</ref>&lt; false, T &gt;</type>
        <definition>using muda::Dense2D = typedef Dense2DBase&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>Dense2D</name>
        <qualifiedname>muda::Dense2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_2d.h" line="166" column="1" bodyfile="src/muda/viewer/dense/dense_2d.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__2d_8h_1ad41d28e0ba2dc4011b6780deea94508f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense2_d_base" kindref="compound">Dense2DBase</ref>&lt; true, T &gt;</type>
        <definition>using muda::CDense2D = typedef Dense2DBase&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CDense2D</name>
        <qualifiedname>muda::CDense2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_2d.h" line="169" column="1" bodyfile="src/muda/viewer/dense/dense_2d.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__3d_8h_1a4a8f4a97ade6b66073676b230757a510" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense3_d_base" kindref="compound">Dense3DBase</ref>&lt; false, T &gt;</type>
        <definition>using muda::Dense3D = typedef Dense3DBase&lt;false, T&gt;</definition>
        <argsstring></argsstring>
        <name>Dense3D</name>
        <qualifiedname>muda::Dense3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_3d.h" line="175" column="1" bodyfile="src/muda/viewer/dense/dense_3d.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dense__3d_8h_1a0e087574573fdd05e20e7ef2e57a0e46" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmuda_1_1_dense3_d_base" kindref="compound">Dense3DBase</ref>&lt; true, T &gt;</type>
        <definition>using muda::CDense3D = typedef Dense3DBase&lt;true, T&gt;</definition>
        <argsstring></argsstring>
        <name>CDense3D</name>
        <qualifiedname>muda::CDense3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_3d.h" line="178" column="1" bodyfile="src/muda/viewer/dense/dense_3d.h" bodystart="178" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="muda__config_8h_1aece8a264a54f1d456248d1c5f3e3b2a0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool muda::RUNTIME_CHECK_ON</definition>
        <argsstring></argsstring>
        <name>RUNTIME_CHECK_ON</name>
        <qualifiedname>muda::RUNTIME_CHECK_ON</qualifiedname>
        <initializer>= MUDA_CHECK_ON</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/muda_config.h" line="11" column="16" bodyfile="src/muda/muda_config.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="muda__config_8h_1acbdb9426e2cdd4ee9cabe0a5c6225ddd" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool muda::COMPUTE_GRAPH_ON</definition>
        <argsstring></argsstring>
        <name>COMPUTE_GRAPH_ON</name>
        <qualifiedname>muda::COMPUTE_GRAPH_ON</qualifiedname>
        <initializer>= MUDA_COMPUTE_GRAPH_ON</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/muda_config.h" line="12" column="16" bodyfile="src/muda/muda_config.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="muda__config_8h_1a7ef683c20fe685387b7fbb0f1cf4b039" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool muda::DEBUG_VIEWER</definition>
        <argsstring></argsstring>
        <name>DEBUG_VIEWER</name>
        <qualifiedname>muda::DEBUG_VIEWER</qualifiedname>
        <initializer>= config::on(true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/muda_config.h" line="21" column="16" bodyfile="src/muda/muda_config.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="muda__config_8h_1a5f86ac87b613b9285b1ccd2e2a177d71" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool muda::TRAP_ON_ERROR</definition>
        <argsstring></argsstring>
        <name>TRAP_ON_ERROR</name>
        <qualifiedname>muda::TRAP_ON_ERROR</qualifiedname>
        <initializer>= config::on(true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/muda_config.h" line="23" column="16" bodyfile="src/muda/muda_config.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="muda__config_8h_1a3db4e58bd0efd45f6e88af650e0ff984" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int muda::LIGHT_WORKLOAD_BLOCK_SIZE</definition>
        <argsstring></argsstring>
        <name>LIGHT_WORKLOAD_BLOCK_SIZE</name>
        <qualifiedname>muda::LIGHT_WORKLOAD_BLOCK_SIZE</qualifiedname>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/muda_config.h" line="25" column="15" bodyfile="src/muda/muda_config.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="muda__config_8h_1a29540809b6e7145494c38cd24190639f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int muda::MIDDLE_WORKLOAD_BLOCK_SIZE</definition>
        <argsstring></argsstring>
        <name>MIDDLE_WORKLOAD_BLOCK_SIZE</name>
        <qualifiedname>muda::MIDDLE_WORKLOAD_BLOCK_SIZE</qualifiedname>
        <initializer>= 128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/muda_config.h" line="27" column="15" bodyfile="src/muda/muda_config.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="muda__config_8h_1a1b638b3e243549fccae94f0e14fd74e2" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int muda::HEAVY_WORKLOAD_BLOCK_SIZE</definition>
        <argsstring></argsstring>
        <name>HEAVY_WORKLOAD_BLOCK_SIZE</name>
        <qualifiedname>muda::HEAVY_WORKLOAD_BLOCK_SIZE</qualifiedname>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/muda_config.h" line="29" column="15" bodyfile="src/muda/muda_config.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="version_8h_1ac719d77b50afe28b214d9dc0407aa309" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool muda::DEFAULT_ASYNC_ALLOC_FREE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_ASYNC_ALLOC_FREE</name>
        <qualifiedname>muda::DEFAULT_ASYNC_ALLOC_FREE</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/version.h" line="26" column="16" bodyfile="src/muda/tools/version.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="always_8h_1a76964bf006df12b527c1bbfd0e8601cc" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::always_false_v</definition>
        <argsstring></argsstring>
        <name>always_false_v</name>
        <qualifiedname>muda::always_false_v</qualifiedname>
        <initializer>= <ref refid="structmuda_1_1always__false" kindref="compound">always_false</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/always.h" line="12" column="16" bodyfile="src/muda/type_traits/always.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cuda__arch_8h_1acbd76242ae3d0478ae7b2812a80dabf5" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_cuda_arch_v</definition>
        <argsstring></argsstring>
        <name>is_cuda_arch_v</name>
        <qualifiedname>muda::is_cuda_arch_v</qualifiedname>
        <initializer>= is_cuda_arch::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/cuda_arch.h" line="14" column="16" bodyfile="src/muda/type_traits/cuda_arch.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1a4fa5f4ef24d6d260a12542ca911deffa" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::force_trivial_v</definition>
        <argsstring></argsstring>
        <name>force_trivial_v</name>
        <qualifiedname>muda::force_trivial_v</qualifiedname>
        <initializer>= <ref refid="structmuda_1_1force__trivial" kindref="compound">force_trivial</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="19" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1aab36bafac604bc2fc68981ee7c638c20" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_trivial_v</definition>
        <argsstring></argsstring>
        <name>is_trivial_v</name>
        <qualifiedname>muda::is_trivial_v</qualifiedname>
        <initializer>= std::is_trivial_v&lt;T&gt; || force_trivial_v&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="21" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1ae7ff5e55ecc8d65388fef1c0702ee0d5" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::force_trivially_destructible_v</definition>
        <argsstring></argsstring>
        <name>force_trivially_destructible_v</name>
        <qualifiedname>muda::force_trivially_destructible_v</qualifiedname>
        <initializer>= <ref refid="structmuda_1_1force__trivially__destructible" kindref="compound">force_trivially_destructible</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="30" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1a4d1e2b8320a5a5d5196ca29aff2d1797" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_trivially_destructible_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_destructible_v</name>
        <qualifiedname>muda::is_trivially_destructible_v</qualifiedname>
        <initializer>=
    std::is_trivially_destructible_v&lt;T&gt; || force_trivially_destructible_v&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="32" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1a011001d871058631108c6c8e23571b7d" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::force_trivially_constructible_v</definition>
        <argsstring></argsstring>
        <name>force_trivially_constructible_v</name>
        <qualifiedname>muda::force_trivially_constructible_v</qualifiedname>
        <initializer>= <ref refid="structmuda_1_1force__trivially__constructible" kindref="compound">force_trivially_constructible</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="42" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1a4eac598a2fb928c5b75870cd7405c43b" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_trivially_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_constructible_v</name>
        <qualifiedname>muda::is_trivially_constructible_v</qualifiedname>
        <initializer>=
    std::is_trivially_constructible_v&lt;T&gt; || force_trivially_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="44" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1aaa9a8706f4db65048b2b9c3cd740985f" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::force_trivially_copy_constructible_v</definition>
        <argsstring></argsstring>
        <name>force_trivially_copy_constructible_v</name>
        <qualifiedname>muda::force_trivially_copy_constructible_v</qualifiedname>
        <initializer>=
    <ref refid="structmuda_1_1force__trivially__copy__constructible" kindref="compound">force_trivially_copy_constructible</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="54" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1a667203223055bb20afe476b10216ea55" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_trivially_copy_constructible_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_copy_constructible_v</name>
        <qualifiedname>muda::is_trivially_copy_constructible_v</qualifiedname>
        <initializer>=
    std::is_trivially_copy_constructible_v&lt;T&gt; || force_trivially_copy_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="57" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1afbd4cbfc22522f33aa49028304f51674" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::force_trivially_copy_assignable_v</definition>
        <argsstring></argsstring>
        <name>force_trivially_copy_assignable_v</name>
        <qualifiedname>muda::force_trivially_copy_assignable_v</qualifiedname>
        <initializer>=
    <ref refid="structmuda_1_1force__trivially__copy__assignable" kindref="compound">force_trivially_copy_assignable</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="67" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__label_8h_1a9f461b8a050677f8ad4936500df32cd9" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_trivially_copy_assignable_v</definition>
        <argsstring></argsstring>
        <name>is_trivially_copy_assignable_v</name>
        <qualifiedname>muda::is_trivially_copy_assignable_v</qualifiedname>
        <initializer>=
    std::is_trivially_copy_assignable_v&lt;T&gt; || force_trivially_copy_assignable_v&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_label.h" line="70" column="16" bodyfile="src/muda/type_traits/type_label.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__modifier_8h_1ab3242d12f8163497a227400a5d4089e4" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_read_only_viewer_v</definition>
        <argsstring></argsstring>
        <name>is_read_only_viewer_v</name>
        <qualifiedname>muda::is_read_only_viewer_v</qualifiedname>
        <initializer>= std::is_same_v&lt;T, read_only_viewer_t&lt;T&gt;&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_modifier.h" line="36" column="16" bodyfile="src/muda/type_traits/type_modifier.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__modifier_8h_1ad0504f191f07fcd5840c9fa0e039dd2d" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_read_write_viewer_v</definition>
        <argsstring></argsstring>
        <name>is_read_write_viewer_v</name>
        <qualifiedname>muda::is_read_write_viewer_v</qualifiedname>
        <initializer>= std::is_same_v&lt;T, read_write_viewer_t&lt;T&gt;&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_modifier.h" line="42" column="16" bodyfile="src/muda/type_traits/type_modifier.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="type__modifier_8h_1a332d80b3ec047d2653741f9b4bb3bd9a" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool muda::is_uniform_viewer_v</definition>
        <argsstring></argsstring>
        <name>is_uniform_viewer_v</name>
        <qualifiedname>muda::is_uniform_viewer_v</qualifiedname>
        <initializer>=
    is_read_only_viewer_v&lt;T&gt; &amp;&amp; is_read_write_viewer_v&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_modifier.h" line="45" column="16" bodyfile="src/muda/type_traits/type_modifier.h" bodystart="45" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="assert_8h_1aaff804cebe3309eec898b1bba9a037f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC void</type>
        <definition>MUDA_INLINE MUDA_GENERIC void muda::trap</definition>
        <argsstring>() MUDA_NOEXCEPT</argsstring>
        <name>trap</name>
        <qualifiedname>muda::trap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/assert.h" line="7" column="31" bodyfile="src/muda/assert.h" bodystart="7" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="assert_8h_1a7a418d1e8b0b7c914ce283aaa5f8c72c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC void</type>
        <definition>MUDA_INLINE MUDA_GENERIC void muda::brkpt</definition>
        <argsstring>() MUDA_NOEXCEPT</argsstring>
        <name>brkpt</name>
        <qualifiedname>muda::brkpt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/assert.h" line="16" column="31" bodyfile="src/muda/assert.h" bodystart="16" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1a6e0bb5d5fcaa2756fe5db05471d93f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_cas</definition>
        <argsstring>(T *address, T compare, T val)</argsstring>
        <name>atomic_cas</name>
        <qualifiedname>muda::atomic_cas</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="6" column="30" bodyfile="src/muda/atomic.h" bodystart="6" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1ac613f01b1a1efd7721d90b03789302ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_add</definition>
        <argsstring>(T *address, T val)</argsstring>
        <name>atomic_add</name>
        <qualifiedname>muda::atomic_add</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="12" column="30" bodyfile="src/muda/atomic.h" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1ad7f231bcb9494efd67eabea1c752f71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_sub</definition>
        <argsstring>(T *address, T val)</argsstring>
        <name>atomic_sub</name>
        <qualifiedname>muda::atomic_sub</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="18" column="30" bodyfile="src/muda/atomic.h" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1a0d2c030d4cccbb4c4d91e105253fca03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_exch</definition>
        <argsstring>(T *address, T val)</argsstring>
        <name>atomic_exch</name>
        <qualifiedname>muda::atomic_exch</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="24" column="30" bodyfile="src/muda/atomic.h" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1a46462afd36b1bf83124b08a53703057c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_max</definition>
        <argsstring>(T *address, T val)</argsstring>
        <name>atomic_max</name>
        <qualifiedname>muda::atomic_max</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="30" column="30" bodyfile="src/muda/atomic.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1a4b9f97446933bf99dbe47d521598b45b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_min</definition>
        <argsstring>(T *address, T val)</argsstring>
        <name>atomic_min</name>
        <qualifiedname>muda::atomic_min</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="36" column="30" bodyfile="src/muda/atomic.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1aae56d9cc68d48b7fab2b1f28673177a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_and</definition>
        <argsstring>(T *address, T val)</argsstring>
        <name>atomic_and</name>
        <qualifiedname>muda::atomic_and</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="42" column="30" bodyfile="src/muda/atomic.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1a23780287f48b731f39f13927e1d05ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_or</definition>
        <argsstring>(T *address, T val)</argsstring>
        <name>atomic_or</name>
        <qualifiedname>muda::atomic_or</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="48" column="30" bodyfile="src/muda/atomic.h" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8h_1a59c6f3e0cc4f43e90c5d6305ab64e9e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__forceinline__ __device__ T</type>
        <definition>__forceinline__ __device__ T muda::atomic_xor</definition>
        <argsstring>(T *address, T val)</argsstring>
        <name>atomic_xor</name>
        <qualifiedname>muda::atomic_xor</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/atomic.h" line="54" column="30" bodyfile="src/muda/atomic.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="check_8h_1a2f1d448da9209b515fc413b3c62b9b54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void muda::check</definition>
        <argsstring>(T result, char const *const func, const char *const file, int const line)</argsstring>
        <name>check</name>
        <qualifiedname>muda::check</qualifiedname>
        <param>
          <type>T</type>
          <declname>result</declname>
        </param>
        <param>
          <type>char const *const</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/check/check.h" line="55" column="33" bodyfile="src/muda/check/check.h" bodystart="55" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="check__cusolver_8h_1a1692a3e2ee1437cc40718adf48a9cd57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC const char *</type>
        <definition>MUDA_INLINE MUDA_GENERIC const char * muda::mudaCudaGetErrorEnum</definition>
        <argsstring>(cusolverStatus_t error)</argsstring>
        <name>mudaCudaGetErrorEnum</name>
        <qualifiedname>muda::mudaCudaGetErrorEnum</qualifiedname>
        <param>
          <type>cusolverStatus_t</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/check/check_cusolver.h" line="7" column="37" bodyfile="src/muda/check/check_cusolver.h" bodystart="7" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="compute__graph__node__type_8h_1a8888ec189add7494663b8bcb7ceb507f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view muda::enum_name</definition>
        <argsstring>(ComputeGraphNodeType t)</argsstring>
        <name>enum_name</name>
        <qualifiedname>muda::enum_name</qualifiedname>
        <param>
          <type>ComputeGraphNodeType</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_node_type.h" line="18" column="25" bodyfile="src/muda/compute_graph/compute_graph_node_type.h" bodystart="18" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="compute__graph__var__usage_8h_1ab0333622dc9be3be53031430e5124b2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool muda::operator&lt;</definition>
        <argsstring>(ComputeGraphVarUsage lhs, ComputeGraphVarUsage rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>muda::operator&lt;</qualifiedname>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_var_usage.h" line="12" column="8" bodyfile="src/muda/compute_graph/compute_graph_var_usage.h" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="compute__graph__var__usage_8h_1a71826cf9af3f388e3dc2a10ce3a320cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool muda::operator&lt;=</definition>
        <argsstring>(ComputeGraphVarUsage lhs, ComputeGraphVarUsage rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>muda::operator&lt;=</qualifiedname>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_var_usage.h" line="17" column="8" bodyfile="src/muda/compute_graph/compute_graph_var_usage.h" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="compute__graph__var__usage_8h_1a1d480fa2c1f23fc7b418b4c4d6cc4af4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool muda::operator&gt;</definition>
        <argsstring>(ComputeGraphVarUsage lhs, ComputeGraphVarUsage rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>muda::operator&gt;</qualifiedname>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_var_usage.h" line="22" column="13" bodyfile="src/muda/compute_graph/compute_graph_var_usage.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="compute__graph__var__usage_8h_1ac5f16af891d5cf3c85f3447d0033f315" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool muda::operator&gt;=</definition>
        <argsstring>(ComputeGraphVarUsage lhs, ComputeGraphVarUsage rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>muda::operator&gt;=</qualifiedname>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_var_usage.h" line="27" column="13" bodyfile="src/muda/compute_graph/compute_graph_var_usage.h" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="compute__graph__var__usage_8h_1abcd2563d506d51975cdeee120f1beb70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool muda::operator==</definition>
        <argsstring>(ComputeGraphVarUsage lhs, ComputeGraphVarUsage rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>muda::operator==</qualifiedname>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ComputeGraphVarUsage</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/compute_graph/compute_graph_var_usage.h" line="32" column="13" bodyfile="src/muda/compute_graph/compute_graph_var_usage.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="log__proxy_8h_1ab6feb63d4f12080546eca6f8dad2a41e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy o, const Eigen::Matrix&lt; T, M, N &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; T, M, N &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/eigen/log_proxy.h" line="8" column="13" declfile="src/muda/ext/eigen/log_proxy.h" declline="8" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="log__proxy_8h_1aaf85a76b228c0caaae1f9cc0d0cd2214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MapOptions</declname>
            <defname>MapOptions</defname>
          </param>
          <param>
            <type>typename StrideType</type>
          </param>
        </templateparamlist>
        <type>MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy o, const Eigen::Map&lt; Eigen::Matrix&lt; T, M, N &gt;, MapOptions, StrideType &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const Eigen::Map&lt; Eigen::Matrix&lt; T, M, N &gt;, MapOptions, StrideType &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/eigen/log_proxy.h" line="11" column="13" declfile="src/muda/ext/eigen/log_proxy.h" declline="11" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="log__proxy_8h_1a06a4a95790c77327529f7f58e4713591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MapOptions</declname>
            <defname>MapOptions</defname>
          </param>
          <param>
            <type>typename StrideType</type>
          </param>
        </templateparamlist>
        <type>MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy o, const Eigen::Map&lt; const Eigen::Matrix&lt; T, M, N &gt;, MapOptions, StrideType &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const Eigen::Map&lt; const Eigen::Matrix&lt; T, M, N &gt;, MapOptions, StrideType &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/eigen/log_proxy.h" line="15" column="13" declfile="src/muda/ext/eigen/log_proxy.h" declline="15" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="log__proxy_8h_1a4f4a3c9c0c86f28a16ad34a428b4a94c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy o, const Eigen::MatrixX&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/eigen/log_proxy.h" line="20" column="13" declfile="src/muda/ext/eigen/log_proxy.h" declline="20" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="log__proxy_8h_1afe9c21b4d957c0de9cd4d7673a70a94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy o, const Eigen::VectorX&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const Eigen::VectorX&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/eigen/log_proxy.h" line="23" column="13" declfile="src/muda/ext/eigen/log_proxy.h" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="log__proxy_8h_1a7fc40adb070d6e6d660a8b1ab74f0d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy o, const Eigen::RowVectorX&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const Eigen::RowVectorX&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/eigen/log_proxy.h" line="26" column="13" declfile="src/muda/ext/eigen/log_proxy.h" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="data__type__mapper_8h_1a9d3e2afac584fbfff0bc8a9491c54e91" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr cudaDataType_t</type>
        <definition>constexpr cudaDataType_t muda::cuda_data_type</definition>
        <argsstring>()</argsstring>
        <name>cuda_data_type</name>
        <qualifiedname>muda::cuda_data_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/type_mapper/data_type_mapper.h" line="8" column="33" bodyfile="src/muda/ext/linear_system/type_mapper/data_type_mapper.h" bodystart="8" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="data__type__mapper_8h_1a6f98725a79839f20e7440f053b4c27bc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr cublasOperation_t</type>
        <definition>constexpr cublasOperation_t muda::cublas_trans_operation</definition>
        <argsstring>(bool b)</argsstring>
        <name>cublas_trans_operation</name>
        <qualifiedname>muda::cublas_trans_operation</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/type_mapper/data_type_mapper.h" line="32" column="29" bodyfile="src/muda/ext/linear_system/type_mapper/data_type_mapper.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="data__type__mapper_8h_1ac15ed08345a124f8bb34c253edade7c1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr cusparseIndexType_t</type>
        <definition>constexpr cusparseIndexType_t muda::cusparse_index_type</definition>
        <argsstring>()</argsstring>
        <name>cusparse_index_type</name>
        <qualifiedname>muda::cusparse_index_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/ext/linear_system/type_mapper/data_type_mapper.h" line="38" column="31" bodyfile="src/muda/ext/linear_system/type_mapper/data_type_mapper.h" bodystart="38" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="launch_2launch_8h_1ad6aa619adbfb599e2c20892da9376cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dim3</type>
        <definition>dim3 muda::cube</definition>
        <argsstring>(int x) MUDA_NOEXCEPT</argsstring>
        <name>cube</name>
        <qualifiedname>muda::cube</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/launch.h" line="39" column="6" declfile="src/muda/launch/launch.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="launch_2launch_8h_1a20a68a3698eedf96ba6b5cf417a52e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dim3</type>
        <definition>dim3 muda::square</definition>
        <argsstring>(int x) MUDA_NOEXCEPT</argsstring>
        <name>square</name>
        <qualifiedname>muda::square</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/launch.h" line="40" column="6" declfile="src/muda/launch/launch.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="launch__base_8h_1a9e7cf569c83c350d633513c5dead7234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmuda_1_1_empty" kindref="compound">Empty</ref></type>
        <definition>Empty muda::on</definition>
        <argsstring>(::cudaStream_t stream)</argsstring>
        <name>on</name>
        <qualifiedname>muda::on</qualifiedname>
        <param>
          <type>::cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/launch_base.h" line="175" column="7" declfile="src/muda/launch/launch_base.h" declline="175" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="launch__base_8h_1a6dde58768b6321b3d6dbafae5f3a4de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmuda_1_1_empty" kindref="compound">Empty</ref></type>
        <definition>Empty muda::on</definition>
        <argsstring>()</argsstring>
        <name>on</name>
        <qualifiedname>muda::on</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/launch_base.h" line="177" column="7" declfile="src/muda/launch/launch_base.h" declline="177" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="launch__base_8h_1a0aaf68478ebd97ea0b7de911c979b89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void muda::wait_device</definition>
        <argsstring>()</argsstring>
        <name>wait_device</name>
        <qualifiedname>muda::wait_device</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/launch_base.h" line="179" column="6" declfile="src/muda/launch/launch_base.h" declline="179" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="launch__base_8h_1aa0bc81850f4db121df0e1fba6b9da4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void muda::wait_stream</definition>
        <argsstring>(::cudaStream_t stream)</argsstring>
        <name>wait_stream</name>
        <qualifiedname>muda::wait_stream</qualifiedname>
        <param>
          <type>::cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/launch_base.h" line="180" column="6" declfile="src/muda/launch/launch_base.h" declline="180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="launch__base_8h_1a882992741d5288280c910b23e86073e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void muda::wait_event</definition>
        <argsstring>(cudaEvent_t event)</argsstring>
        <name>wait_event</name>
        <qualifiedname>muda::wait_event</qualifiedname>
        <param>
          <type>cudaEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/launch/launch_base.h" line="181" column="6" declfile="src/muda/launch/launch_base.h" declline="181" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a7916379ad5c11e487d5686b6f5c52ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, char1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>char1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="7" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="7" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1ae76c6aadecec2d596d8bfa87dc5c6f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, char2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>char2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="11" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1abeae313c66078253c171113de6f5560d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, char3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>char3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="15" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a33a4a10b95fa09cce8a46984e8aac9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, char4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>char4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="19" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a4efa55961bed1df4d0ac60b1c2b0f73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, short1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>short1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="23" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a4c7b4f1140b9b511c0e93dd072088919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, short2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>short2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="27" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a14743ffb6e5bd387c7d9106750119382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, short3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>short3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="31" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a329f32fce8232ffeb4edc31064e07a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, short4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>short4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="35" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1aff3b35bd023d6e22e94e4c00ce8ff76e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, int1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>int1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="39" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a256740756c68d1f4f62efce6ae172036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, int2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>int2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="43" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1ac356d2e8799b7be1bd707117248eb6b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, int3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>int3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="47" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1ae886e5e44d8ba63521fbbd3bd787019d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, int4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>int4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="51" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a4441d8eb42d9d2e88fad15c90fa102f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, long1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>long1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="55" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1ac9aa6a243c8de5b3f78366efb57c2516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, long2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>long2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="59" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1abe0140f04739bf933eb15e6b8e7b7841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, long3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>long3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="63" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a5d663129f76ccb5564eeb8ea66b95657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, long4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>long4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="67" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1aeb61a68a8eb33714f9f08f73917c79e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, longlong1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>longlong1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="71" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a4bd14f9369c65f7aeda16628a38b0ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, longlong2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>longlong2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="75" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1acaf020dfbc2428b44c7d5882687adbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, longlong3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>longlong3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="79" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a9b40a1db9e6eb48eadcc833f91882694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, longlong4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>longlong4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="83" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a4b3ad29c7bf8038c7edf2daafe029718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, uchar1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>uchar1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="90" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1afb48d8ad7272403e80c41122d7e2e1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, uchar2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>uchar2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="94" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1ae00f4787e1dd4c717eae68470115852a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, uchar3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>uchar3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="98" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a8c9c22e8480499adbd71727c823935fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, uchar4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>uchar4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="102" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1ae2065b27c6b5f0a2b56f4b0b4535e1b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, uint1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>uint1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="106" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a5626cea91c8ae94d430ee0a4ad8c2ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, uint2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>uint2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="110" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a80d4000e56d3e21ee8ae3d88f0789fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, uint3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>uint3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="114" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a3b1a145a42a7737e2f9b98db60d553a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, uint4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>uint4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="118" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a2d2ce56ba62435de2018706f5cf52add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, ulong1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>ulong1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="122" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a73fe47c527c190ada76a3a04817973d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, ulong2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>ulong2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="126" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a332c43ee1400ea59b4f3653d480f3b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, ulong3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>ulong3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="130" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a5330c0da4429cc6f679862e2bc32f17b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, ulong4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>ulong4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="135" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a71e0474107bc84686d0fb11961026f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, ulonglong1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>ulonglong1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="140" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a0cf904ffe19efd27dac891d9f9c538ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, ulonglong2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>ulonglong2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="144" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a13755a55e08210f145fadbbb46f0c8b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, ulonglong3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>ulonglong3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="148" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a61bd28168c32de5eb75d9f3b384b7330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, ulonglong4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>ulonglong4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="152" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1adfa872dc11a71147169000d3b8bc5f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, float1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>float1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="158" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a3899ce85665f45aaff602e4a6e8f73e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, float2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>float2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="162" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a4a3dc4807fe9ef02c51c0b100085a64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, float3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>float3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="166" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a9307968ac786f9e01c8e46a1206863f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, float4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>float4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="170" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a14950a320ce68774ff6c36760bcab7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, double1 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>double1</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="174" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1ae554a1e929178339b25a58bf4c85b244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, double2 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>double2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="178" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1a01af9211d51d3a324e0c76c1062dba12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, double3 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>double3</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="182" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="logger__function_8h_1addea5804c91699a6954d2f54b3ae9c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_DEVICE <ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
        <definition>MUDA_INLINE MUDA_DEVICE LogProxy muda::operator&lt;&lt;</definition>
        <argsstring>(LogProxy proxy, double4 val)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>muda::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classmuda_1_1_log_proxy" kindref="compound">LogProxy</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>double4</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/logger/logger_function.h" line="186" column="25" bodyfile="src/muda/logger/logger_function.h" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="print_8h_1a7e4ceb157d74c3c26a22992742011b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InType</type>
          </param>
          <param>
            <type>typename OutType</type>
            <defval>InType</defval>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC OutType</type>
        <definition>MUDA_INLINE MUDA_GENERIC OutType muda::print_convert</definition>
        <argsstring>(const InType &amp;v)</argsstring>
        <name>print_convert</name>
        <qualifiedname>muda::print_convert</qualifiedname>
        <param>
          <type>const InType &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/print.h" line="10" column="34" bodyfile="src/muda/print.h" bodystart="10" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="print_8h_1a7ce45b6903f06fdbdd865dff9127ba86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::print_convert</definition>
        <argsstring>(const char *v)</argsstring>
        <name>print_convert</name>
        <qualifiedname>muda::print_convert</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/print.h" line="15" column="31" bodyfile="src/muda/print.h" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="print_8h_1aa0381150e9baec7e4ae51ff558d10cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC const T &amp;</type>
        <definition>MUDA_INLINE MUDA_GENERIC const T &amp; muda::print_check</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>print_check</name>
        <qualifiedname>muda::print_check</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/print.h" line="21" column="34" bodyfile="src/muda/print.h" bodystart="21" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="print_8h_1a72ac5e2632a8478cf52aa05fd2a281bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::print_check</definition>
        <argsstring>(const char *t)</argsstring>
        <name>print_check</name>
        <qualifiedname>muda::print_check</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/print.h" line="29" column="31" bodyfile="src/muda/print.h" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="print_8h_1abd95963cadc94ace4997b38dc322d36d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC void</type>
        <definition>MUDA_INLINE MUDA_GENERIC void muda::print</definition>
        <argsstring>(const char *const fmt, Args &amp;&amp;... arg)</argsstring>
        <name>print</name>
        <qualifiedname>muda::print</qualifiedname>
        <param>
          <type>const char *const</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/print.h" line="35" column="31" bodyfile="src/muda/print.h" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="profiler_8h_1ad7c236215979d2a9609d926118aace2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>MUDA_HOST double</type>
        <definition>MUDA_HOST double muda::profile_host</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>profile_host</name>
        <qualifiedname>muda::profile_host</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/profiler.h" line="19" column="18" bodyfile="src/muda/profiler.h" bodystart="19" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="cuda__vec__utils_8h_1a70538f7f558fc86f62adb8c984edfdd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC int2</type>
        <definition>MUDA_INLINE MUDA_GENERIC int2 muda::operator+</definition>
        <argsstring>(const int2 &amp;a, const int2 &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>muda::operator+</qualifiedname>
        <param>
          <type>const int2 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/cuda_vec_utils.h" line="7" column="31" bodyfile="src/muda/tools/cuda_vec_utils.h" bodystart="7" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1a1a38dd961a10b73871a5b3a2c58ff6bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC <ref refid="classmuda_1_1_extent2_d" kindref="compound">Extent2D</ref></type>
        <definition>MUDA_INLINE MUDA_GENERIC Extent2D muda::as_extent</definition>
        <argsstring>(const Offset2D &amp;offset) MUDA_NOEXCEPT</argsstring>
        <name>as_extent</name>
        <qualifiedname>muda::as_extent</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_offset2_d" kindref="compound">Offset2D</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="141" column="35" bodyfile="src/muda/tools/extent.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1aa43beb128fdc4978d545dfac1cf7dd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC <ref refid="classmuda_1_1_extent3_d" kindref="compound">Extent3D</ref></type>
        <definition>MUDA_INLINE MUDA_GENERIC Extent3D muda::as_extent</definition>
        <argsstring>(const Offset3D &amp;offset) MUDA_NOEXCEPT</argsstring>
        <name>as_extent</name>
        <qualifiedname>muda::as_extent</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_offset3_d" kindref="compound">Offset3D</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="146" column="35" bodyfile="src/muda/tools/extent.h" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1abb98c99dd905f173ce35873efaaa2262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC <ref refid="classmuda_1_1_offset2_d" kindref="compound">Offset2D</ref></type>
        <definition>MUDA_INLINE MUDA_GENERIC Offset2D muda::as_offset</definition>
        <argsstring>(const Extent2D &amp;extent) MUDA_NOEXCEPT</argsstring>
        <name>as_offset</name>
        <qualifiedname>muda::as_offset</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_extent2_d" kindref="compound">Extent2D</ref> &amp;</type>
          <declname>extent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="151" column="35" bodyfile="src/muda/tools/extent.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1a50a1f8abefa06c8d3ab13a3d5775b1b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC <ref refid="classmuda_1_1_offset3_d" kindref="compound">Offset3D</ref></type>
        <definition>MUDA_INLINE MUDA_GENERIC Offset3D muda::as_offset</definition>
        <argsstring>(const Extent3D &amp;extent) MUDA_NOEXCEPT</argsstring>
        <name>as_offset</name>
        <qualifiedname>muda::as_offset</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_extent3_d" kindref="compound">Extent3D</ref> &amp;</type>
          <declname>extent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="156" column="35" bodyfile="src/muda/tools/extent.h" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1a8deb742859c98118abd4f8f0786ad90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC <ref refid="classmuda_1_1_offset2_d" kindref="compound">Offset2D</ref></type>
        <definition>MUDA_INLINE MUDA_GENERIC Offset2D muda::min</definition>
        <argsstring>(const Offset2D &amp;lhs, const Offset2D &amp;rhs)</argsstring>
        <name>min</name>
        <qualifiedname>muda::min</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_offset2_d" kindref="compound">Offset2D</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classmuda_1_1_offset2_d" kindref="compound">Offset2D</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="161" column="35" bodyfile="src/muda/tools/extent.h" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1a2d8185e76ac53d8fec276c076b543b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC <ref refid="classmuda_1_1_offset3_d" kindref="compound">Offset3D</ref></type>
        <definition>MUDA_INLINE MUDA_GENERIC Offset3D muda::min</definition>
        <argsstring>(const Offset3D &amp;lhs, const Offset3D &amp;rhs)</argsstring>
        <name>min</name>
        <qualifiedname>muda::min</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_offset3_d" kindref="compound">Offset3D</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classmuda_1_1_offset3_d" kindref="compound">Offset3D</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="167" column="35" bodyfile="src/muda/tools/extent.h" bodystart="167" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1a50bf6b4ed49f2eed4277604759f9936a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC <ref refid="classmuda_1_1_extent2_d" kindref="compound">Extent2D</ref></type>
        <definition>MUDA_INLINE MUDA_GENERIC Extent2D muda::max</definition>
        <argsstring>(const Extent2D &amp;lhs, const Extent2D &amp;rhs)</argsstring>
        <name>max</name>
        <qualifiedname>muda::max</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_extent2_d" kindref="compound">Extent2D</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classmuda_1_1_extent2_d" kindref="compound">Extent2D</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="174" column="35" bodyfile="src/muda/tools/extent.h" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1a9c7a985daab2662b1c36e78dba2a9036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC <ref refid="classmuda_1_1_extent3_d" kindref="compound">Extent3D</ref></type>
        <definition>MUDA_INLINE MUDA_GENERIC Extent3D muda::max</definition>
        <argsstring>(const Extent3D &amp;lhs, const Extent3D &amp;rhs)</argsstring>
        <name>max</name>
        <qualifiedname>muda::max</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_extent3_d" kindref="compound">Extent3D</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classmuda_1_1_extent3_d" kindref="compound">Extent3D</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="180" column="35" bodyfile="src/muda/tools/extent.h" bodystart="180" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1aad0abc1d996f1677d5b8b503f3eee977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::MUDA_DEFINE_COMPARISON_OPERATOR</definition>
        <argsstring>(&lt;=)</argsstring>
        <name>MUDA_DEFINE_COMPARISON_OPERATOR</name>
        <qualifiedname>muda::MUDA_DEFINE_COMPARISON_OPERATOR</qualifiedname>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="198" column="1" declfile="src/muda/tools/extent.h" declline="198" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1a4a64fb2148b5e9b1cc22d9182118b4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::MUDA_DEFINE_COMPARISON_OPERATOR</definition>
        <argsstring>(&lt;)</argsstring>
        <name>MUDA_DEFINE_COMPARISON_OPERATOR</name>
        <qualifiedname>muda::MUDA_DEFINE_COMPARISON_OPERATOR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="199" column="1" declfile="src/muda/tools/extent.h" declline="199" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1a9b869eb662fca15f40c5c0faf12eb32f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::MUDA_DEFINE_ARITHMATIC_OPERATOR</definition>
        <argsstring>(+)</argsstring>
        <name>MUDA_DEFINE_ARITHMATIC_OPERATOR</name>
        <qualifiedname>muda::MUDA_DEFINE_ARITHMATIC_OPERATOR</qualifiedname>
        <param>
          <type>+</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="232" column="1" declfile="src/muda/tools/extent.h" declline="232" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="extent_8h_1aef4221960fc49f83d10bf40c4acaf024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>muda::MUDA_DEFINE_ARITHMATIC_OPERATOR</definition>
        <argsstring>(-)</argsstring>
        <name>MUDA_DEFINE_ARITHMATIC_OPERATOR</name>
        <qualifiedname>muda::MUDA_DEFINE_ARITHMATIC_OPERATOR</qualifiedname>
        <param>
          <type>-</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/extent.h" line="233" column="1" declfile="src/muda/tools/extent.h" declline="233" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="flag_8h_1a62d107ffbe1a40d480676df056cd5bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BitType</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt;</type>
        <definition>MUDA_INLINE MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; muda::operator&amp;</definition>
        <argsstring>(BitType bit, Flags&lt; BitType &gt; const &amp;flags) MUDA_NOEXCEPT</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>muda::operator&amp;</qualifiedname>
        <param>
          <type>BitType</type>
          <declname>bit</declname>
        </param>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="165" column="47" bodyfile="src/muda/tools/flag.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="flag_8h_1a2cdd27a68f51bbab862b5b2b193b4c49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BitType</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt;</type>
        <definition>MUDA_INLINE MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; muda::operator|</definition>
        <argsstring>(BitType bit, Flags&lt; BitType &gt; const &amp;flags) MUDA_NOEXCEPT</argsstring>
        <name>operator|</name>
        <qualifiedname>muda::operator|</qualifiedname>
        <param>
          <type>BitType</type>
          <declname>bit</declname>
        </param>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="172" column="47" bodyfile="src/muda/tools/flag.h" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="flag_8h_1af2011a8d1e591375261434f24a9b6eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BitType</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC MUDA_CONSTEXPR <ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt;</type>
        <definition>MUDA_INLINE MUDA_GENERIC MUDA_CONSTEXPR Flags&lt; BitType &gt; muda::operator^</definition>
        <argsstring>(BitType bit, Flags&lt; BitType &gt; const &amp;flags) MUDA_NOEXCEPT</argsstring>
        <name>operator^</name>
        <qualifiedname>muda::operator^</qualifiedname>
        <param>
          <type>BitType</type>
          <declname>bit</declname>
        </param>
        <param>
          <type><ref refid="classmuda_1_1_flags" kindref="compound">Flags</ref>&lt; BitType &gt; const &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/flag.h" line="179" column="47" bodyfile="src/muda/tools/flag.h" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="fuzzy_8h_1a953fe62ea016ad7b56dac08c1a550802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FHost</type>
          </param>
          <param>
            <type>typename FDevice</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC decltype(auto)</type>
        <definition>MUDA_INLINE MUDA_GENERIC decltype(auto) muda::invoke</definition>
        <argsstring>(FHost &amp;&amp;host, FDevice &amp;&amp;device) MUDA_NOEXCEPT</argsstring>
        <name>invoke</name>
        <qualifiedname>muda::invoke</qualifiedname>
        <param>
          <type>FHost &amp;&amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>FDevice &amp;&amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/fuzzy.h" line="10" column="35" bodyfile="src/muda/tools/fuzzy.h" bodystart="10" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="fuzzy_8h_1a28fba796fd4368f6f7f38f56af5a8d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC dim3</type>
        <definition>MUDA_INLINE MUDA_GENERIC dim3 muda::grid_dim</definition>
        <argsstring>()</argsstring>
        <name>grid_dim</name>
        <qualifiedname>muda::grid_dim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/fuzzy.h" line="31" column="31" bodyfile="src/muda/tools/fuzzy.h" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="fuzzy_8h_1aa34fb541bae6d4355e4ffa0481b58d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC dim3</type>
        <definition>MUDA_INLINE MUDA_GENERIC dim3 muda::block_idx</definition>
        <argsstring>()</argsstring>
        <name>block_idx</name>
        <qualifiedname>muda::block_idx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/fuzzy.h" line="40" column="31" bodyfile="src/muda/tools/fuzzy.h" bodystart="40" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="fuzzy_8h_1a1fbb66fd88b5f1407056cf662899f5c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC dim3</type>
        <definition>MUDA_INLINE MUDA_GENERIC dim3 muda::block_dim</definition>
        <argsstring>()</argsstring>
        <name>block_dim</name>
        <qualifiedname>muda::block_dim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/fuzzy.h" line="49" column="31" bodyfile="src/muda/tools/fuzzy.h" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="fuzzy_8h_1aa8e45366648a72f123b7bf569dd40335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MUDA_INLINE MUDA_GENERIC dim3</type>
        <definition>MUDA_INLINE MUDA_GENERIC dim3 muda::thread_idx</definition>
        <argsstring>()</argsstring>
        <name>thread_idx</name>
        <qualifiedname>muda::thread_idx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/tools/fuzzy.h" line="58" column="31" bodyfile="src/muda/tools/fuzzy.h" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="type__modifier_8h_1a0cce8d826d1edc763a2ef1062aa0baa4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_GENERIC MUDA_INLINE T *</type>
        <definition>MUDA_GENERIC MUDA_INLINE T * muda::remove_const</definition>
        <argsstring>(const T *ptr) noexcept</argsstring>
        <name>remove_const</name>
        <qualifiedname>muda::remove_const</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_modifier.h" line="51" column="28" bodyfile="src/muda/type_traits/type_modifier.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="type__modifier_8h_1a0639d059751bb512974e279a74d2603a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_GENERIC MUDA_INLINE T &amp;</type>
        <definition>MUDA_GENERIC MUDA_INLINE T &amp; muda::remove_const</definition>
        <argsstring>(const T &amp;ref) noexcept</argsstring>
        <name>remove_const</name>
        <qualifiedname>muda::remove_const</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/type_traits/type_modifier.h" line="57" column="28" bodyfile="src/muda/type_traits/type_modifier.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="dense__0d_8h_1a693109b432238d902b9df8f8564f5e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_cdense</definition>
        <argsstring>(const T *data) MUDA_NOEXCEPT</argsstring>
        <name>make_cdense</name>
        <qualifiedname>muda::make_cdense</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_0d.h" line="113" column="31" bodyfile="src/muda/viewer/dense/dense_0d.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="dense__0d_8h_1ad30a77a3f9d7f83f5037d33da11fd893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_dense</definition>
        <argsstring>(T *data) MUDA_NOEXCEPT</argsstring>
        <name>make_dense</name>
        <qualifiedname>muda::make_dense</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_0d.h" line="119" column="31" bodyfile="src/muda/viewer/dense/dense_0d.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="dense__0d_8h_1aaafc045578b394cd39bbde3471253615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC const T &amp;</type>
        <definition>MUDA_INLINE MUDA_GENERIC const T &amp; muda::print_convert</definition>
        <argsstring>(const Dense&lt; T &gt; &amp;v) MUDA_NOEXCEPT</argsstring>
        <name>print_convert</name>
        <qualifiedname>muda::print_convert</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_dense_viewer_t" kindref="compound">Dense</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_0d.h" line="126" column="34" bodyfile="src/muda/viewer/dense/dense_0d.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="dense__0d_8h_1a36cc20c51ef26b6b6d4bb07bba80575c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC const T &amp;</type>
        <definition>MUDA_INLINE MUDA_GENERIC const T &amp; muda::print_convert</definition>
        <argsstring>(const CDense&lt; T &gt; &amp;v) MUDA_NOEXCEPT</argsstring>
        <name>print_convert</name>
        <qualifiedname>muda::print_convert</qualifiedname>
        <param>
          <type>const <ref refid="classmuda_1_1_dense_viewer_t" kindref="compound">CDense</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_0d.h" line="132" column="34" bodyfile="src/muda/viewer/dense/dense_0d.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="dense__1d_8h_1a49a24d6fe68917fd7fc40199b98ed38c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_cdense_1d</definition>
        <argsstring>(const T *data, int dimx) MUDA_NOEXCEPT</argsstring>
        <name>make_cdense_1d</name>
        <qualifiedname>muda::make_cdense_1d</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_1d.h" line="164" column="31" bodyfile="src/muda/viewer/dense/dense_1d.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="dense__1d_8h_1ad4e140870f336804ffa2191e7ce0570f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_cdense_1d</definition>
        <argsstring>(const T(&amp;data)[N]) MUDA_NOEXCEPT</argsstring>
        <name>make_cdense_1d</name>
        <qualifiedname>muda::make_cdense_1d</qualifiedname>
        <param>
          <type>const T(&amp;)</type>
          <declname>data</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_1d.h" line="170" column="31" bodyfile="src/muda/viewer/dense/dense_1d.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="dense__1d_8h_1a1661f76d8bbc5b4cc1ae295887267122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_dense_1d</definition>
        <argsstring>(T *data, int dimx) MUDA_NOEXCEPT</argsstring>
        <name>make_dense_1d</name>
        <qualifiedname>muda::make_dense_1d</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_1d.h" line="176" column="31" bodyfile="src/muda/viewer/dense/dense_1d.h" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="dense__1d_8h_1ac6653b0bd94aeb9b810eb0b8b504c49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_dense_1d</definition>
        <argsstring>(T(&amp;data)[N]) MUDA_NOEXCEPT</argsstring>
        <name>make_dense_1d</name>
        <qualifiedname>muda::make_dense_1d</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <declname>data</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_1d.h" line="182" column="31" bodyfile="src/muda/viewer/dense/dense_1d.h" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="dense__2d_8h_1a9b498966008fe7454717534761f19570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_cdense_2d</definition>
        <argsstring>(const T *data, const int2 &amp;dim) MUDA_NOEXCEPT</argsstring>
        <name>make_cdense_2d</name>
        <qualifiedname>muda::make_cdense_2d</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const int2 &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_2d.h" line="187" column="31" bodyfile="src/muda/viewer/dense/dense_2d.h" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="dense__2d_8h_1afda436ef5cf6181ec01e36da3626f51e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_dense_2d</definition>
        <argsstring>(T *data, const int2 &amp;dim) MUDA_NOEXCEPT</argsstring>
        <name>make_dense_2d</name>
        <qualifiedname>muda::make_dense_2d</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const int2 &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_2d.h" line="193" column="31" bodyfile="src/muda/viewer/dense/dense_2d.h" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="dense__2d_8h_1a60b84d4f40e4d46f50b0c9b19eeec578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_cdense_2d</definition>
        <argsstring>(const T *data, int dimx, int dimy) MUDA_NOEXCEPT</argsstring>
        <name>make_cdense_2d</name>
        <qualifiedname>muda::make_cdense_2d</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_2d.h" line="199" column="31" bodyfile="src/muda/viewer/dense/dense_2d.h" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="dense__2d_8h_1a234d544a86b3384a845bbce8adb671d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_dense_2d</definition>
        <argsstring>(T *data, int dimx, int dimy) MUDA_NOEXCEPT</argsstring>
        <name>make_dense_2d</name>
        <qualifiedname>muda::make_dense_2d</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_2d.h" line="205" column="31" bodyfile="src/muda/viewer/dense/dense_2d.h" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="dense__3d_8h_1ab3b86e7d4937c7c5d7fc7a98b43a3e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_cdense_3d</definition>
        <argsstring>(const T *data, const int3 &amp;dim) MUDA_NOEXCEPT</argsstring>
        <name>make_cdense_3d</name>
        <qualifiedname>muda::make_cdense_3d</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const int3 &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_3d.h" line="195" column="31" bodyfile="src/muda/viewer/dense/dense_3d.h" bodystart="195" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="dense__3d_8h_1ae9bcff180c112dea13685c67ef3f6982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_dense_3d</definition>
        <argsstring>(T *data, const int3 &amp;dim) MUDA_NOEXCEPT</argsstring>
        <name>make_dense_3d</name>
        <qualifiedname>muda::make_dense_3d</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const int3 &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_3d.h" line="206" column="31" bodyfile="src/muda/viewer/dense/dense_3d.h" bodystart="206" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="dense__3d_8h_1a76520627099b18b827d1dda32d202eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_cdense_3d</definition>
        <argsstring>(const T *data, int dimx, int dimy, int dimz) MUDA_NOEXCEPT</argsstring>
        <name>make_cdense_3d</name>
        <qualifiedname>muda::make_cdense_3d</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_3d.h" line="217" column="31" bodyfile="src/muda/viewer/dense/dense_3d.h" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="dense__3d_8h_1a03832eae415777daad73bfbce0b27d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MUDA_INLINE MUDA_GENERIC auto</type>
        <definition>MUDA_INLINE MUDA_GENERIC auto muda::make_dense_3d</definition>
        <argsstring>(T *data, int dimx, int dimy, int dimz) MUDA_NOEXCEPT</argsstring>
        <name>make_dense_3d</name>
        <qualifiedname>muda::make_dense_3d</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/muda/viewer/dense/dense_3d.h" line="223" column="31" bodyfile="src/muda/viewer/dense/dense_3d.h" bodystart="223" bodyend="226"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/muda/assert.h" line="5" column="1"/>
  </compounddef>
</doxygen>
