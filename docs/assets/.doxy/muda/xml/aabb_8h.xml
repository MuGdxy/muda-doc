<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.1" xml:lang="en-US">
  <compounddef id="aabb_8h" kind="file" language="C++">
    <compoundname>aabb.h</compoundname>
    <includes refid="utility_8h" local="no">muda/ext/geo/lbvh/utility.h</includes>
    <includes local="no">thrust/swap.h</includes>
    <includes local="no">cmath</includes>
    <includes refid="cuda__runtime_8h" local="no">cuda_runtime.h</includes>
    <includedby refid="bvh_8h" local="no">src/muda/ext/geo/lbvh/bvh.h</includedby>
    <includedby refid="bvh__viewer_8h" local="no">src/muda/ext/geo/lbvh/bvh_viewer.h</includedby>
    <includedby refid="lbvh_2lbvh_8h" local="no">src/muda/ext/geo/lbvh/lbvh.h</includedby>
    <includedby refid="predicator_8h" local="no">src/muda/ext/geo/lbvh/predicator.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>cuda_runtime.h</label>
        <link refid="cuda__runtime_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cuda_runtime_api.h</label>
        <link refid="cuda__runtime__api_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/muda/ext/geo/lbvh/aabb.h</label>
        <link refid="aabb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>muda/ext/geo/lbvh/utility.h</label>
        <link refid="utility_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>muda/muda_config.h</label>
        <link refid="muda__config_8h_source"/>
      </node>
      <node id="3">
        <label>muda/muda_def.h</label>
        <link refid="muda__def_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>muda/tools/platform.h</label>
        <link refid="platform_8h_source"/>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="6">
        <label>cuda.h</label>
      </node>
      <node id="10">
        <label>math_constants.h</label>
      </node>
      <node id="11">
        <label>thrust/swap.h</label>
      </node>
      <node id="9">
        <label>vector_types.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/muda/ext/geo/lbvh.h</label>
        <link refid="lbvh_8h_source"/>
      </node>
      <node id="1">
        <label>src/muda/ext/geo/lbvh/aabb.h</label>
        <link refid="aabb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/muda/ext/geo/lbvh/bvh.h</label>
        <link refid="bvh_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/muda/ext/geo/lbvh/bvh_viewer.h</label>
        <link refid="bvh__viewer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/muda/ext/geo/lbvh/lbvh.h</label>
        <link refid="lbvh_2lbvh_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/muda/ext/geo/lbvh/predicator.h</label>
        <link refid="predicator_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/muda/ext/geo/lbvh/query.h</label>
        <link refid="query_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmuda_1_1lbvh_1_1_a_a_b_b" prot="public">muda::lbvh::AABB</innerclass>
    <innernamespace refid="namespacemuda">muda</innernamespace>
    <innernamespace refid="namespacemuda_1_1lbvh">muda::lbvh</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;muda/ext/geo/lbvh/utility.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thrust/swap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda_runtime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">muda::lbvh</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="10" refid="structmuda_1_1lbvh_1_1_a_a_b_b" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AABB</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1vector__of" kindref="compound">vector_of&lt;T&gt;::type</ref><sp/>upper;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1vector__of" kindref="compound">vector_of&lt;T&gt;::type</ref><sp/>lower;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>MUDA_GENERIC<sp/><sp/><sp/><sp/><sp/><sp/><sp/>AABB()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>MUDA_GENERIC<sp/><sp/><sp/><sp/><sp/><sp/><sp/>AABB(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AABB&lt;T&gt;&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>MUDA_GENERIC<sp/><sp/><sp/><sp/><sp/><sp/><sp/>AABB(AABB&lt;T&gt;&amp;&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>MUDA_GENERIC<sp/>AABB&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AABB&lt;T&gt;&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>MUDA_GENERIC<sp/>AABB&amp;<sp/>operator=(AABB&lt;T&gt;&amp;&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">MUDA_GENERIC<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>intersects(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;T&gt;</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lhs.upper.x<sp/>&lt;<sp/>rhs.lower.x<sp/>||<sp/>rhs.upper.x<sp/>&lt;<sp/>lhs.lower.x)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lhs.upper.y<sp/>&lt;<sp/>rhs.lower.y<sp/>||<sp/>rhs.upper.y<sp/>&lt;<sp/>lhs.lower.y)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lhs.upper.z<sp/>&lt;<sp/>rhs.lower.z<sp/>||<sp/>rhs.upper.z<sp/>&lt;<sp/>lhs.lower.z)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">MUDA_GENERIC<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;double&gt;</ref><sp/>merge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;double&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;double&gt;</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;double&gt;</ref><sp/>merged;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.upper.x<sp/>=<sp/>::fmax(lhs.upper.x,<sp/>rhs.upper.x);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.upper.y<sp/>=<sp/>::fmax(lhs.upper.y,<sp/>rhs.upper.y);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.upper.z<sp/>=<sp/>::fmax(lhs.upper.z,<sp/>rhs.upper.z);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.lower.x<sp/>=<sp/>::fmin(lhs.lower.x,<sp/>rhs.lower.x);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.lower.y<sp/>=<sp/>::fmin(lhs.lower.y,<sp/>rhs.lower.y);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.lower.z<sp/>=<sp/>::fmin(lhs.lower.z,<sp/>rhs.lower.z);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>merged;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">MUDA_GENERIC<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;float&gt;</ref><sp/>merge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;float&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;float&gt;</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;float&gt;</ref><sp/>merged;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.upper.x<sp/>=<sp/>::fmaxf(lhs.upper.x,<sp/>rhs.upper.x);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.upper.y<sp/>=<sp/>::fmaxf(lhs.upper.y,<sp/>rhs.upper.y);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.upper.z<sp/>=<sp/>::fmaxf(lhs.upper.z,<sp/>rhs.upper.z);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.lower.x<sp/>=<sp/>::fminf(lhs.lower.x,<sp/>rhs.lower.x);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.lower.y<sp/>=<sp/>::fminf(lhs.lower.y,<sp/>rhs.lower.y);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>merged.lower.z<sp/>=<sp/>::fminf(lhs.lower.z,<sp/>rhs.lower.z);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>merged;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>metrics<sp/>defined<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Nearest<sp/>Neighbor<sp/>Queries<sp/>(1995)<sp/>ACS-SIGMOD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Nick<sp/>Roussopoulos,<sp/>Stephen<sp/>Kelley<sp/>FredericVincent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">MUDA_GENERIC<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mindist(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;float&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float4&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>::fminf(lhs.upper.x,<sp/>::fmaxf(lhs.lower.x,<sp/>rhs.x))<sp/>-<sp/>rhs.x;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>::fminf(lhs.upper.y,<sp/>::fmaxf(lhs.lower.y,<sp/>rhs.y))<sp/>-<sp/>rhs.y;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/>::fminf(lhs.upper.z,<sp/>::fmaxf(lhs.lower.z,<sp/>rhs.z))<sp/>-<sp/>rhs.z;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy<sp/>+<sp/>dz<sp/>*<sp/>dz;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">MUDA_GENERIC<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mindist(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;double&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double4&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>::fmin(lhs.upper.x,<sp/>::fmax(lhs.lower.x,<sp/>rhs.x))<sp/>-<sp/>rhs.x;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>::fmin(lhs.upper.y,<sp/>::fmax(lhs.lower.y,<sp/>rhs.y))<sp/>-<sp/>rhs.y;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/>::fmin(lhs.upper.z,<sp/>::fmax(lhs.lower.z,<sp/>rhs.z))<sp/>-<sp/>rhs.z;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy<sp/>+<sp/>dz<sp/>*<sp/>dz;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">MUDA_GENERIC<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minmaxdist(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;float&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float4&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/>rm_sq<sp/>=<sp/>make_float3((lhs.lower.x<sp/>-<sp/>rhs.x)<sp/>*<sp/>(lhs.lower.x<sp/>-<sp/>rhs.x),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.lower.y<sp/>-<sp/>rhs.y)<sp/>*<sp/>(lhs.lower.y<sp/>-<sp/>rhs.y),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.lower.z<sp/>-<sp/>rhs.z)<sp/>*<sp/>(lhs.lower.z<sp/>-<sp/>rhs.z));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>float3<sp/>rM_sq<sp/>=<sp/>make_float3((lhs.upper.x<sp/>-<sp/>rhs.x)<sp/>*<sp/>(lhs.upper.x<sp/>-<sp/>rhs.x),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.upper.y<sp/>-<sp/>rhs.y)<sp/>*<sp/>(lhs.upper.y<sp/>-<sp/>rhs.y),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.upper.z<sp/>-<sp/>rhs.z)<sp/>*<sp/>(lhs.upper.z<sp/>-<sp/>rhs.z));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((lhs.upper.x<sp/>+<sp/>lhs.lower.x)<sp/>*<sp/>0.5f<sp/>&lt;<sp/>rhs.x)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::swap(rm_sq.x,<sp/>rM_sq.x);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((lhs.upper.y<sp/>+<sp/>lhs.lower.y)<sp/>*<sp/>0.5f<sp/>&lt;<sp/>rhs.y)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::swap(rm_sq.y,<sp/>rM_sq.y);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((lhs.upper.z<sp/>+<sp/>lhs.lower.z)<sp/>*<sp/>0.5f<sp/>&lt;<sp/>rhs.z)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::swap(rm_sq.z,<sp/>rM_sq.z);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>rm_sq.x<sp/>+<sp/>rM_sq.y<sp/>+<sp/>rM_sq.z;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>rM_sq.x<sp/>+<sp/>rm_sq.y<sp/>+<sp/>rM_sq.z;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/>rM_sq.x<sp/>+<sp/>rM_sq.y<sp/>+<sp/>rm_sq.z;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::fminf(dx,<sp/>::fminf(dy,<sp/>dz));</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">MUDA_GENERIC<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minmaxdist(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;double&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double4&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>double3<sp/>rm_sq<sp/>=<sp/>make_double3((lhs.lower.x<sp/>-<sp/>rhs.x)<sp/>*<sp/>(lhs.lower.x<sp/>-<sp/>rhs.x),</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.lower.y<sp/>-<sp/>rhs.y)<sp/>*<sp/>(lhs.lower.y<sp/>-<sp/>rhs.y),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.lower.z<sp/>-<sp/>rhs.z)<sp/>*<sp/>(lhs.lower.z<sp/>-<sp/>rhs.z));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>double3<sp/>rM_sq<sp/>=<sp/>make_double3((lhs.upper.x<sp/>-<sp/>rhs.x)<sp/>*<sp/>(lhs.upper.x<sp/>-<sp/>rhs.x),</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.upper.y<sp/>-<sp/>rhs.y)<sp/>*<sp/>(lhs.upper.y<sp/>-<sp/>rhs.y),</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.upper.z<sp/>-<sp/>rhs.z)<sp/>*<sp/>(lhs.upper.z<sp/>-<sp/>rhs.z));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((lhs.upper.x<sp/>+<sp/>lhs.lower.x)<sp/>*<sp/>0.5<sp/>&lt;<sp/>rhs.x)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::swap(rm_sq.x,<sp/>rM_sq.x);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((lhs.upper.y<sp/>+<sp/>lhs.lower.y)<sp/>*<sp/>0.5<sp/>&lt;<sp/>rhs.y)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::swap(rm_sq.y,<sp/>rM_sq.y);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((lhs.upper.z<sp/>+<sp/>lhs.lower.z)<sp/>*<sp/>0.5<sp/>&lt;<sp/>rhs.z)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrust::swap(rm_sq.z,<sp/>rM_sq.z);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>rm_sq.x<sp/>+<sp/>rM_sq.y<sp/>+<sp/>rM_sq.z;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>rM_sq.x<sp/>+<sp/>rm_sq.y<sp/>+<sp/>rM_sq.z;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/>rM_sq.x<sp/>+<sp/>rM_sq.y<sp/>+<sp/>rm_sq.z;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::fmin(dx,<sp/>::fmin(dy,<sp/>dz));</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">MUDA_GENERIC<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1vector__of" kindref="compound">vector_of&lt;T&gt;::type</ref><sp/>centroid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1_a_a_b_b" kindref="compound">AABB&lt;T&gt;</ref>&amp;<sp/>box)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structmuda_1_1lbvh_1_1vector__of" kindref="compound">vector_of&lt;T&gt;::type</ref><sp/>c;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>c.x<sp/>=<sp/>(box.upper.x<sp/>+<sp/>box.lower.x)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>c.y<sp/>=<sp/>(box.upper.y<sp/>+<sp/>box.lower.y)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>c.z<sp/>=<sp/>(box.upper.z<sp/>+<sp/>box.lower.z)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>muda::lbvh</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/muda/ext/geo/lbvh/aabb.h"/>
  </compounddef>
</doxygen>
